@model AssetManagement.Controllers.PaginatedList<AssetManagement.Models.Equipment>
@{
    ViewData["Title"] = "Equipment";
}

<style>
    /* Column reordering styles */
    .table thead th {
        cursor: move;
        transition: background-color 0.2s, transform 0.1s;
        user-select: none;
    }
    
    .table thead th:hover {
        background: #e9ecef;
        transform: translateY(-1px);
    }
    
    .table thead th.actions-header {
        cursor: default;
    }
    
    .table thead th.actions-header:hover {
        background: #f8f9fa;
        transform: none;
    }
    
    .sortable-ghost {
        opacity: 0.5;
        background: #dee2e6 !important;
        transform: rotate(5deg);
    }
    
    .sortable-chosen {
        background: #fff3cd !important;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        transform: scale(1.02);
    }
    
    .sortable-drag {
        background: #fff3cd !important;
        box-shadow: 0 8px 16px rgba(0,0,0,0.2);
        transform: rotate(5deg) scale(1.05);
    }
    
    /* Text truncation and tooltip styles */
    .table td {
        max-width: 200px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }
    
    .table td:hover {
        white-space: normal;
        word-wrap: break-word;
        max-width: none;
        position: relative;
        z-index: 10;
        background: #fff;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        border-radius: 4px;
        padding: 8px;
    }
    
    /* Column toggle styles */
    .column-toggle:checked + label {
        font-weight: 600;
        color: #0d6efd;
    }
    
    /* Responsive table */
    .table-responsive {
        overflow-x: auto;
    }
    
    /* Sticky header */
    .table thead th {
        position: sticky;
        top: 0;
        background: #f8f9fa;
        z-index: 1;
    }
    
    /* Sticky Actions column on the right */
    .table thead th.actions-header,
    .table tbody td:last-child {
        position: sticky;
        right: 0;
        background: #f8f9fa;
        z-index: 2;
        border-left: 2px solid #dee2e6;
    }
    
    .table tbody td:last-child {
        background: white;
        box-shadow: -2px 0 4px rgba(0,0,0,0.1);
    }
    
    /* Ensure the Actions column header has proper styling */
    .table thead th.actions-header {
        background: #f8f9fa !important;
        border-left: 2px solid #dee2e6;
        box-shadow: -2px 0 4px rgba(0,0,0,0.1);
    }
    
    /* Horizontal Scroll Navigation */
    .table-container {
        position: relative;
    }
    
    .scroll-navigation {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
        margin-bottom: 10px;
        padding: 8px;
        background: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 6px;
    }
    
    .scroll-btn {
        padding: 4px 8px;
        border-radius: 4px;
        transition: all 0.2s;
    }
    
    .scroll-btn:hover {
        background-color: #007bff;
        color: white;
        border-color: #007bff;
    }
    
    .scroll-btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }
    
    .scroll-indicator {
        flex: 1;
        max-width: 200px;
        height: 6px;
        background: #e9ecef;
        border-radius: 3px;
        overflow: hidden;
    }
    
    .scroll-progress {
        height: 100%;
        background: #007bff;
        border-radius: 3px;
        transition: width 0.3s ease;
        width: 0%;
    }
</style>

<style>
    .filter-button {
        padding: 2px 6px;
        font-size: 0.75rem;
        border-radius: 4px;
    }
    
    .filter-button.active {
        background-color: #007bff;
        color: white;
        border-color: #007bff;
    }
    
    .filter-button:hover {
        background-color: #e9ecef;
    }
    
    .filter-count {
        background-color: #dc3545;
        color: white;
        border-radius: 50%;
        padding: 2px 6px;
        font-size: 0.7rem;
        margin-left: 4px;
        display: none;
    }
    
    .filter-count.show {
        display: inline-block;
    }
    
    .multi-filter-checkbox {
        margin-right: 8px;
    }
    
    .form-check-label {
        cursor: pointer;
        width: 100%;
        padding: 4px 0;
    }
    
    .form-check-label:hover {
        background-color: #f8f9fa;
        border-radius: 4px;
    }
    }
    
    .filter-button.active:hover {
        background-color: #0056b3;
    }
    
    .dropdown-menu {
        min-width: 200px;
    }
    
    .dropdown-item.active {
        background-color: #007bff;
        color: white;
    }
    
    .table th {
        position: relative;
    }
    
    .dropdown-menu input[type="text"] {
        border: 1px solid #dee2e6;
        border-radius: 4px;
        font-size: 0.875rem;
    }
    
    .dropdown-menu input[type="text"]:focus {
        border-color: #007bff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }
    
    .filter-item {
        transition: all 0.2s ease;
    }
    
    .filter-item:hover {
        background-color: #f8f9fa;
    }
    
    /* Master search suggestions styling */
    #searchSuggestions {
        background: white;
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        max-height: 300px;
        overflow-y: auto;
        z-index: 1050;
    }
    
    .suggestion-item {
        transition: background-color 0.15s ease-in-out;
    }
    
    .suggestion-item:hover {
        background-color: #f8f9fa;
    }
    
    .suggestion-item:last-child {
        border-bottom: none !important;
    }
    
    /* Search input focus styling */
    #searchInput:focus {
        border-color: #007bff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }
    
    /* Master search icon in placeholder */
    #searchInput::placeholder {
        color: #6c757d;
        opacity: 1;
    }
</style>

<div class="container-fluid">
    @Html.AntiForgeryToken()
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-0">Equipment</h1>
            <p class="text-muted mb-0">Manage IT equipment inventory</p>
        </div>
        <div class="d-flex gap-2">
            <a asp-action="Create" class="btn btn-primary">
                <i class="bi bi-plus-circle"></i> Add Equipment
            </a>
        </div>
    </div>

    <!-- Search and Filter Form -->
    <div class="card mb-4">
        <div class="card-body">
            <form asp-action="Index" method="get" class="row g-3">
                <!-- Search Input -->
                <div class="col-md-6">
                    <div class="input-group">
                        <input type="text" class="form-control" id="searchInput" name="SearchString" value="@ViewData["CurrentFilter"]" placeholder="🔍 Master search: OATH Tag, Serial, Net Name, User, Model, Manufacturer, Department, Location..." autocomplete="off">
                        <div id="searchSuggestions" class="position-absolute bg-white border rounded shadow-sm" style="top: 100%; left: 0; right: 0; z-index: 1000; display: none; max-height: 200px; overflow-y: auto;"></div>
                        <button class="btn btn-outline-secondary" type="submit">
                            <i class="bi bi-search"></i>
                        </button>
                        @if (!string.IsNullOrEmpty(ViewData["CurrentFilter"]?.ToString()))
                        {
                            <a asp-action="Index" class="btn btn-outline-secondary">
                                <i class="bi bi-x-circle"></i> Clear
                            </a>
                        }
                    </div>
                </div>
                
                <!-- Filter Dropdowns -->
                <div class="col-md-6">
                    <div class="row g-2">
                        <div class="col-md-4">
                            <select name="categoryFilter" class="form-select form-select-sm" onchange="this.form.submit()">
                                <option value="">All Categories</option>
                                @foreach (var category in ViewData["CategoryOptions"] as List<string> ?? new List<string>())
                                {
                                    if (category == ViewData["CategoryFilter"]?.ToString())
                                    {
                                        <option value="@category" selected>@category</option>
                                    }
                                    else
                                    {
                                        <option value="@category">@category</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="col-md-4">
                            <select name="statusFilter" class="form-select form-select-sm" onchange="this.form.submit()">
                                <option value="">All Statuses</option>
                                @foreach (var status in ViewData["StatusOptions"] as List<string> ?? new List<string>())
                                {
                                    if (status == ViewData["StatusFilter"]?.ToString())
                                    {
                                        <option value="@status" selected>@status</option>
                                    }
                                    else
                                    {
                                        <option value="@status">@status</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="col-md-3">
                            <select name="departmentFilter" class="form-select form-select-sm" onchange="this.form.submit()">
                                <option value="">All Units</option>
                                @foreach (var dept in ViewData["DepartmentOptions"] as List<string> ?? new List<string>())
                                {
                                    if (dept == ViewData["DepartmentFilter"]?.ToString())
                                    {
                                        <option value="@dept" selected>@dept</option>
                                    }
                                    else
                                    {
                                        <option value="@dept">@dept</option>
                                    }
                                }
                            </select>
                        </div>

                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Equipment List -->
    <div class="card">
        <div class="card-body">
            @if (!Model.Any())
            {
                <div class="text-center py-5">
                    <i class="bi bi-laptop display-1 text-muted"></i>
                    <h4 class="text-muted mt-3">No Equipment Found</h4>
                    <p class="text-muted">@(string.IsNullOrEmpty(ViewData["CurrentFilter"]?.ToString()) ? "Add your first piece of equipment to get started." : "No equipment matches your search criteria.")</p>
                    @if (string.IsNullOrEmpty(ViewData["CurrentFilter"]?.ToString()))
                    {
                        <a asp-action="Create" class="btn btn-primary">
                            <i class="bi bi-plus-circle"></i> Add Equipment
                        </a>
                    }
                </div>
            }
            else
            {
                <div class="table-container">
                    <!-- Horizontal Scroll Navigation -->
                    <div class="scroll-navigation" id="scrollNavigation" style="display: none;">
                        <button class="btn btn-sm btn-outline-secondary scroll-btn scroll-left" onclick="scrollTable('left')" title="Scroll Left">
                            <i class="bi bi-chevron-left"></i>
                        </button>
                        <div class="scroll-indicator">
                            <div class="scroll-progress" id="scrollProgress"></div>
                        </div>
                        <button class="btn btn-sm btn-outline-secondary scroll-btn scroll-right" onclick="scrollTable('right')" title="Scroll Right">
                            <i class="bi bi-chevron-right"></i>
                        </button>
                    </div>
                    
                    <div class="table-responsive">
                        <table class="table table-hover" id="equipmentTable">
                        <thead class="table-light">
                            <tr>
                                <th class="column-oath-tag">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["OATHTagSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" asp-route-categoryFilter="@ViewData["CategoryFilter"]" asp-route-statusFilter="@ViewData["StatusFilter"]" asp-route-departmentFilter="@ViewData["DepartmentFilter"]" class="text-decoration-none me-2">
                                            OATH Tag
                                            @if (ViewData["CurrentSort"]?.ToString() == "oath_tag_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["OathTagFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 300px; overflow-y: auto; min-width: 250px;">
                                                <li><h6 class="dropdown-header">Filter by OATH Tag</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search OATH tags..." 
                                                               onkeyup="filterDropdownItems(this, 'oath-tag-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="oath-tag-filter-items">
                                                        @foreach (var tag in ViewData["OathTagOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <a class="dropdown-item @(tag == ViewData["OathTagFilter"]?.ToString() ? "active" : "")" 
                                                                   href="@Url.Action("Index", new { 
                                                                       sortOrder = ViewData["CurrentSort"], 
                                                                       currentFilter = ViewData["CurrentFilter"], 
                                                                       categoryFilter = ViewData["CategoryFilter"], 
                                                                       statusFilter = ViewData["StatusFilter"], 
                                                                       departmentFilter = ViewData["DepartmentFilter"], 
                                                                       oathTagFilter = tag 
                                                                   })">
                                                                    @tag
                                                                </a>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-assigned-to">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["AssignedToSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" asp-route-categoryFilter="@ViewData["CategoryFilter"]" asp-route-statusFilter="@ViewData["StatusFilter"]" asp-route-departmentFilter="@ViewData["DepartmentFilter"]" class="text-decoration-none me-2">
                                            Assigned To
                                            @if (ViewData["CurrentSort"]?.ToString() == "assigned_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "assigned")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["AssignedToFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 300px; overflow-y: auto; min-width: 250px;">
                                                <li><h6 class="dropdown-header">Filter by Assigned To</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search users..." 
                                                               onkeyup="filterDropdownItems(this, 'assigned-to-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="assigned-to-filter-items">
                                                        @foreach (var user in ViewData["AssignedToOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <a class="dropdown-item @(user == ViewData["AssignedToFilter"]?.ToString() ? "active" : "")" 
                                                                   href="@Url.Action("Index", new { 
                                                                       sortOrder = ViewData["CurrentSort"], 
                                                                       currentFilter = ViewData["CurrentFilter"], 
                                                                       categoryFilter = ViewData["CategoryFilter"], 
                                                                       statusFilter = ViewData["StatusFilter"], 
                                                                       departmentFilter = ViewData["DepartmentFilter"], 
                                                                       assignedToFilter = user 
                                                                   })">
                                                                    @user
                                                                </a>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-category">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["CategorySortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" asp-route-categoryFilter="@ViewData["CategoryFilter"]" asp-route-statusFilter="@ViewData["StatusFilter"]" asp-route-departmentFilter="@ViewData["DepartmentFilter"]" class="text-decoration-none me-2">
                                            Category
                                            @if (ViewData["CurrentSort"]?.ToString() == "category_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "category")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["CategoryFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                                <span class="filter-count" id="category-filter-count"></span>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 400px; overflow-y: auto; min-width: 280px;">
                                                <li><h6 class="dropdown-header">Filter by Category</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search categories..." 
                                                               onkeyup="filterDropdownItems(this, 'category-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="category-filter-items">
                                                        @{
                                                            var selectedCategories = ViewData["CategoryFilter"]?.ToString()?.Split(',').Select(s => s.Trim()).ToList() ?? new List<string>();
                                                        }
                                                        @foreach (var category in ViewData["CategoryOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <div class="form-check">
                                                                    <input class="form-check-input multi-filter-checkbox" type="checkbox" 
                                                                           id="category-@category.Replace(" ", "-")" 
                                                                           value="@category" 
                                                                           data-filter-type="category"
                                                                           @(selectedCategories.Contains(category) ? "checked" : "")>
                                                                    <label class="form-check-label" for="category-@category.Replace(" ", "-")">
                                                                        @category
                                                                    </label>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2 d-flex gap-2">
                                                        <button class="btn btn-sm btn-outline-primary" onclick="applyMultiFilter('category')">Apply</button>
                                                        <button class="btn btn-sm btn-outline-secondary" onclick="clearMultiFilter('category')">Clear</button>
                                                        <button class="btn btn-sm btn-outline-info" onclick="selectAllMultiFilter('category')">Select All</button>
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-unit">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["DepartmentSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" asp-route-categoryFilter="@ViewData["CategoryFilter"]" asp-route-statusFilter="@ViewData["StatusFilter"]" asp-route-departmentFilter="@ViewData["DepartmentFilter"]" class="text-decoration-none me-2">
                                            Unit
                                            @if (ViewData["CurrentSort"]?.ToString() == "department_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "department")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["DepartmentFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                                <span class="filter-count" id="department-filter-count"></span>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 400px; overflow-y: auto; min-width: 280px;">
                                                <li><h6 class="dropdown-header">Filter by Unit</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search units..." 
                                                               onkeyup="filterDropdownItems(this, 'unit-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="unit-filter-items">
                                                        @{
                                                            var selectedDepartments = ViewData["DepartmentFilter"]?.ToString()?.Split(',').Select(s => s.Trim()).ToList() ?? new List<string>();
                                                        }
                                                        @foreach (var dept in ViewData["DepartmentOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <div class="form-check">
                                                                    <input class="form-check-input multi-filter-checkbox" type="checkbox" 
                                                                           id="department-@dept.Replace(" ", "-")" 
                                                                           value="@dept" 
                                                                           data-filter-type="department"
                                                                           @(selectedDepartments.Contains(dept) ? "checked" : "")>
                                                                    <label class="form-check-label" for="department-@dept.Replace(" ", "-")">
                                                                        @dept
                                                                    </label>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2 d-flex gap-2">
                                                        <button class="btn btn-sm btn-outline-primary" onclick="applyMultiFilter('department')">Apply</button>
                                                        <button class="btn btn-sm btn-outline-secondary" onclick="clearMultiFilter('department')">Clear</button>
                                                        <button class="btn btn-sm btn-outline-info" onclick="selectAllMultiFilter('department')">Select All</button>
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-location">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["LocationSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" asp-route-categoryFilter="@ViewData["CategoryFilter"]" asp-route-statusFilter="@ViewData["StatusFilter"]" asp-route-departmentFilter="@ViewData["DepartmentFilter"]" class="text-decoration-none me-2">
                                            Location
                                            @if (ViewData["CurrentSort"]?.ToString() == "location_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "location")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["LocationFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                                <span class="filter-count" id="location-filter-count"></span>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 400px; overflow-y: auto; min-width: 280px;">
                                                <li><h6 class="dropdown-header">Filter by Location</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search locations..." 
                                                               onkeyup="filterDropdownItems(this, 'location-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="location-filter-items">
                                                        @{
                                                            var selectedLocations = ViewData["LocationFilter"]?.ToString()?.Split(',').Select(s => s.Trim()).ToList() ?? new List<string>();
                                                        }
                                                        @foreach (var location in ViewData["LocationOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <div class="form-check">
                                                                    <input class="form-check-input multi-filter-checkbox" type="checkbox" 
                                                                           id="location-@location.Replace(" ", "-")" 
                                                                           value="@location" 
                                                                           data-filter-type="location"
                                                                           @(selectedLocations.Contains(location) ? "checked" : "")>
                                                                    <label class="form-check-label" for="location-@location.Replace(" ", "-")">
                                                                        @location
                                                                    </label>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2 d-flex gap-2">
                                                        <button class="btn btn-sm btn-outline-primary" onclick="applyMultiFilter('location')">Apply</button>
                                                        <button class="btn btn-sm btn-outline-secondary" onclick="clearMultiFilter('location')">Clear</button>
                                                        <button class="btn btn-sm btn-outline-info" onclick="selectAllMultiFilter('location')">Select All</button>
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-floor">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["FloorSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" asp-route-categoryFilter="@ViewData["CategoryFilter"]" asp-route-statusFilter="@ViewData["StatusFilter"]" asp-route-departmentFilter="@ViewData["DepartmentFilter"]" asp-route-locationFilter="@ViewData["LocationFilter"]" class="text-decoration-none me-2">
                                            Floor
                                            @if (ViewData["CurrentSort"]?.ToString() == "floor_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "floor")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["FloorFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                                <span class="filter-count" id="floor-filter-count"></span>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 400px; overflow-y: auto; min-width: 280px;">
                                                <li><h6 class="dropdown-header">Filter by Floor</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search floors..." 
                                                               onkeyup="filterDropdownItems(this, 'floor-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="floor-filter-items">
                                                        @{
                                                            var selectedFloors = ViewData["FloorFilter"]?.ToString()?.Split(',').Select(s => s.Trim()).ToList() ?? new List<string>();
                                                        }
                                                        @foreach (var floor in ViewData["FloorOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <div class="form-check">
                                                                    <input class="form-check-input multi-filter-checkbox" type="checkbox" 
                                                                           id="floor-@floor.Replace(" ", "-")" 
                                                                           value="@floor" 
                                                                           data-filter-type="floor"
                                                                           @(selectedFloors.Contains(floor) ? "checked" : "")>
                                                                    <label class="form-check-label" for="floor-@floor.Replace(" ", "-")">
                                                                        @floor
                                                                    </label>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2 d-flex gap-2">
                                                        <button class="btn btn-sm btn-outline-primary" onclick="applyMultiFilter('floor')">Apply</button>
                                                        <button class="btn btn-sm btn-outline-secondary" onclick="clearMultiFilter('floor')">Clear</button>
                                                        <button class="btn btn-sm btn-outline-info" onclick="selectAllMultiFilter('floor')">Select All</button>
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-status">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["StatusSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" asp-route-categoryFilter="@ViewData["CategoryFilter"]" asp-route-statusFilter="@ViewData["StatusFilter"]" asp-route-departmentFilter="@ViewData["DepartmentFilter"]" class="text-decoration-none me-2">
                                            Status
                                            @if (ViewData["CurrentSort"]?.ToString() == "status_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "status")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["StatusFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                                <span class="filter-count" id="status-filter-count"></span>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 400px; overflow-y: auto; min-width: 280px;">
                                                <li><h6 class="dropdown-header">Filter by Status</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search statuses..." 
                                                               onkeyup="filterDropdownItems(this, 'status-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="status-filter-items">
                                                        @{
                                                            var selectedStatuses = ViewData["StatusFilter"]?.ToString()?.Split(',').Select(s => s.Trim()).ToList() ?? new List<string>();
                                                        }
                                                        @foreach (var status in ViewData["StatusOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <div class="form-check">
                                                                    <input class="form-check-input multi-filter-checkbox" type="checkbox" 
                                                                           id="status-@status.Replace(" ", "-")" 
                                                                           value="@status" 
                                                                           data-filter-type="status"
                                                                           @(selectedStatuses.Contains(status) ? "checked" : "")>
                                                                    <label class="form-check-label" for="status-@status.Replace(" ", "-")">
                                                                        @status
                                                                    </label>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2 d-flex gap-2">
                                                        <button class="btn btn-sm btn-outline-primary" onclick="applyMultiFilter('status')">Apply</button>
                                                        <button class="btn btn-sm btn-outline-secondary" onclick="clearMultiFilter('status')">Clear</button>
                                                        <button class="btn btn-sm btn-outline-info" onclick="selectAllMultiFilter('status')">Select All</button>
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-net-name">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["NetNameSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" asp-route-categoryFilter="@ViewData["CategoryFilter"]" asp-route-statusFilter="@ViewData["StatusFilter"]" asp-route-departmentFilter="@ViewData["DepartmentFilter"]" class="text-decoration-none me-2">
                                            Net Name
                                            @if (ViewData["CurrentSort"]?.ToString() == "netname_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "netname")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["NetNameFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                                <span class="filter-count" id="netname-filter-count"></span>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 400px; overflow-y: auto; min-width: 280px;">
                                                <li><h6 class="dropdown-header">Filter by Net Name</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search net names..." 
                                                               onkeyup="filterDropdownItems(this, 'netname-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="netname-filter-items">
                                                        @{
                                                            var selectedNetNames = ViewData["NetNameFilter"]?.ToString()?.Split(',').Select(s => s.Trim()).ToList() ?? new List<string>();
                                                        }
                                                        @foreach (var netName in ViewData["NetNameOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <div class="form-check">
                                                                    <input class="form-check-input multi-filter-checkbox" type="checkbox" 
                                                                           id="netname-@netName.Replace(" ", "-")" 
                                                                           value="@netName" 
                                                                           data-filter-type="netname"
                                                                           @(selectedNetNames.Contains(netName) ? "checked" : "")>
                                                                    <label class="form-check-label" for="netname-@netName.Replace(" ", "-")">
                                                                        @netName
                                                                    </label>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2 d-flex gap-2">
                                                        <button class="btn btn-sm btn-outline-primary" onclick="applyMultiFilter('netname')">Apply</button>
                                                        <button class="btn btn-sm btn-outline-secondary" onclick="clearMultiFilter('netname')">Clear</button>
                                                        <button class="btn btn-sm btn-outline-info" onclick="selectAllMultiFilter('netname')">Select All</button>
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-model">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["ModelSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" asp-route-categoryFilter="@ViewData["CategoryFilter"]" asp-route-statusFilter="@ViewData["StatusFilter"]" asp-route-departmentFilter="@ViewData["DepartmentFilter"]" class="text-decoration-none me-2">
                                            Model
                                            @if (ViewData["CurrentSort"]?.ToString() == "model_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "model")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["ModelFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                                <span class="filter-count" id="model-filter-count"></span>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 400px; overflow-y: auto; min-width: 280px;">
                                                <li><h6 class="dropdown-header">Filter by Model</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search models..." 
                                                               onkeyup="filterDropdownItems(this, 'model-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="model-filter-items">
                                                        @{
                                                            var selectedModels = ViewData["ModelFilter"]?.ToString()?.Split(',').Select(s => s.Trim()).ToList() ?? new List<string>();
                                                        }
                                                        @foreach (var modelName in ViewData["ModelOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <div class="form-check">
                                                                    <input class="form-check-input multi-filter-checkbox" type="checkbox" 
                                                                           id="model-@modelName.Replace(" ", "-")" 
                                                                           value="@modelName" 
                                                                           data-filter-type="model"
                                                                           @(selectedModels.Contains(modelName) ? "checked" : "")>
                                                                    <label class="form-check-label" for="model-@modelName.Replace(" ", "-")">
                                                                        @modelName
                                                                    </label>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2 d-flex gap-2">
                                                        <button class="btn btn-sm btn-outline-primary" onclick="applyMultiFilter('model')">Apply</button>
                                                        <button class="btn btn-sm btn-outline-secondary" onclick="clearMultiFilter('model')">Clear</button>
                                                        <button class="btn btn-sm btn-outline-info" onclick="selectAllMultiFilter('model')">Select All</button>
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-serial-number">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["SerialNumberSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" asp-route-categoryFilter="@ViewData["CategoryFilter"]" asp-route-statusFilter="@ViewData["StatusFilter"]" asp-route-departmentFilter="@ViewData["DepartmentFilter"]" class="text-decoration-none me-2">
                                            Serial Number
                                            @if (ViewData["CurrentSort"]?.ToString() == "serialnumber_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "serialnumber")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["SerialNumberFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                                <span class="filter-count" id="serialnumber-filter-count"></span>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 400px; overflow-y: auto; min-width: 280px;">
                                                <li><h6 class="dropdown-header">Filter by Serial Number</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search serial numbers..." 
                                                               onkeyup="filterDropdownItems(this, 'serialnumber-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="serialnumber-filter-items">
                                                        @{
                                                            var selectedSerialNumbers = ViewData["SerialNumberFilter"]?.ToString()?.Split(',').Select(s => s.Trim()).ToList() ?? new List<string>();
                                                        }
                                                        @foreach (var serialNumber in ViewData["SerialNumberOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <div class="form-check">
                                                                    <input class="form-check-input multi-filter-checkbox" type="checkbox" 
                                                                           id="serialnumber-@serialNumber.Replace(" ", "-")" 
                                                                           value="@serialNumber" 
                                                                           data-filter-type="serialnumber"
                                                                           @(selectedSerialNumbers.Contains(serialNumber) ? "checked" : "")>
                                                                    <label class="form-check-label" for="serialnumber-@serialNumber.Replace(" ", "-")">
                                                                        @serialNumber
                                                                    </label>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2 d-flex gap-2">
                                                        <button class="btn btn-sm btn-outline-primary" onclick="applyMultiFilter('serialnumber')">Apply</button>
                                                        <button class="btn btn-sm btn-outline-secondary" onclick="clearMultiFilter('serialnumber')">Clear</button>
                                                        <button class="btn btn-sm btn-outline-info" onclick="selectAllMultiFilter('serialnumber')">Select All</button>
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-desk-number">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["DeskNumberSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" asp-route-categoryFilter="@ViewData["CategoryFilter"]" asp-route-statusFilter="@ViewData["StatusFilter"]" asp-route-departmentFilter="@ViewData["DepartmentFilter"]" class="text-decoration-none me-2">
                                            Desk Number
                                            @if (ViewData["CurrentSort"]?.ToString() == "desknumber_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "desknumber")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["DeskNumberFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                                <span class="filter-count" id="desknumber-filter-count"></span>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 400px; overflow-y: auto; min-width: 280px;">
                                                <li><h6 class="dropdown-header">Filter by Desk Number</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search desk numbers..." 
                                                               onkeyup="filterDropdownItems(this, 'desknumber-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="desknumber-filter-items">
                                                        @{
                                                            var selectedDeskNumbers = ViewData["DeskNumberFilter"]?.ToString()?.Split(',').Select(s => s.Trim()).ToList() ?? new List<string>();
                                                        }
                                                        @foreach (var deskNumber in ViewData["DeskNumberOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <div class="form-check">
                                                                    <input class="form-check-input multi-filter-checkbox" type="checkbox" 
                                                                           id="desknumber-@deskNumber.Replace(" ", "-")" 
                                                                           value="@deskNumber" 
                                                                           data-filter-type="desknumber"
                                                                           @(selectedDeskNumbers.Contains(deskNumber) ? "checked" : "")>
                                                                    <label class="form-check-label" for="desknumber-@deskNumber.Replace(" ", "-")">
                                                                        @deskNumber
                                                                    </label>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2 d-flex gap-2">
                                                        <button class="btn btn-sm btn-outline-primary" onclick="applyMultiFilter('desknumber')">Apply</button>
                                                        <button class="btn btn-sm btn-outline-secondary" onclick="clearMultiFilter('desknumber')">Clear</button>
                                                        <button class="btn btn-sm btn-outline-info" onclick="selectAllMultiFilter('desknumber')">Select All</button>
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-manufacturer">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["ManufacturerSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" asp-route-categoryFilter="@ViewData["CategoryFilter"]" asp-route-statusFilter="@ViewData["StatusFilter"]" asp-route-departmentFilter="@ViewData["DepartmentFilter"]" class="text-decoration-none me-2">
                                            Manufacturer
                                            @if (ViewData["CurrentSort"]?.ToString() == "manufacturer_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "manufacturer")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["ManufacturerFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                                <span class="filter-count" id="manufacturer-filter-count"></span>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 400px; overflow-y: auto; min-width: 280px;">
                                                <li><h6 class="dropdown-header">Filter by Manufacturer</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search manufacturers..." 
                                                               onkeyup="filterDropdownItems(this, 'manufacturer-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="manufacturer-filter-items">
                                                        @{
                                                            var selectedManufacturers = ViewData["ManufacturerFilter"]?.ToString()?.Split(',').Select(s => s.Trim()).ToList() ?? new List<string>();
                                                        }
                                                        @foreach (var manufacturer in ViewData["ManufacturerOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <div class="form-check">
                                                                    <input class="form-check-input multi-filter-checkbox" type="checkbox" 
                                                                           id="manufacturer-@manufacturer.Replace(" ", "-")" 
                                                                           value="@manufacturer" 
                                                                           data-filter-type="manufacturer"
                                                                           @(selectedManufacturers.Contains(manufacturer) ? "checked" : "")>
                                                                    <label class="form-check-label" for="manufacturer-@manufacturer.Replace(" ", "-")">
                                                                        @manufacturer
                                                                    </label>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2 d-flex gap-2">
                                                        <button class="btn btn-sm btn-outline-primary" onclick="applyMultiFilter('manufacturer')">Apply</button>
                                                        <button class="btn btn-sm btn-outline-secondary" onclick="clearMultiFilter('manufacturer')">Clear</button>
                                                        <button class="btn btn-sm btn-outline-info" onclick="selectAllMultiFilter('manufacturer')">Select All</button>
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-purchase-date">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["PurchaseDateSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" asp-route-categoryFilter="@ViewData["CategoryFilter"]" asp-route-statusFilter="@ViewData["StatusFilter"]" asp-route-departmentFilter="@ViewData["DepartmentFilter"]" class="text-decoration-none me-2">
                                            Purchase Date
                                            @if (ViewData["CurrentSort"]?.ToString() == "purchasedate_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "purchasedate")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["PurchaseDateFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                                <span class="filter-count" id="purchasedate-filter-count"></span>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 400px; overflow-y: auto; min-width: 280px;">
                                                <li><h6 class="dropdown-header">Filter by Purchase Date</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search purchase dates..." 
                                                               onkeyup="filterDropdownItems(this, 'purchasedate-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="purchasedate-filter-items">
                                                        @{
                                                            var selectedPurchaseDates = ViewData["PurchaseDateFilter"]?.ToString()?.Split(',').Select(s => s.Trim()).ToList() ?? new List<string>();
                                                        }
                                                        @foreach (var purchaseDate in ViewData["PurchaseDateOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <div class="form-check">
                                                                    <input class="form-check-input multi-filter-checkbox" type="checkbox" 
                                                                           id="purchasedate-@purchaseDate.Replace(" ", "-")" 
                                                                           value="@purchaseDate" 
                                                                           data-filter-type="purchasedate"
                                                                           @(selectedPurchaseDates.Contains(purchaseDate) ? "checked" : "")>
                                                                    <label class="form-check-label" for="purchasedate-@purchaseDate.Replace(" ", "-")">
                                                                        @purchaseDate
                                                                    </label>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2 d-flex gap-2">
                                                        <button class="btn btn-sm btn-outline-primary" onclick="applyMultiFilter('purchasedate')">Apply</button>
                                                        <button class="btn btn-sm btn-outline-secondary" onclick="clearMultiFilter('purchasedate')">Clear</button>
                                                        <button class="btn btn-sm btn-outline-info" onclick="selectAllMultiFilter('purchasedate')">Select All</button>
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-asset-tag">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["AssetTagSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" class="text-decoration-none me-2">
                                            Asset Tag
                                            @if (ViewData["CurrentSort"]?.ToString() == "asset_tag_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "asset_tag")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["AssetTagFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                                <span class="filter-count" id="assettag-filter-count"></span>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 400px; overflow-y: auto; min-width: 280px;">
                                                <li><h6 class="dropdown-header">Filter by Asset Tag</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search asset tags..." 
                                                               onkeyup="filterDropdownItems(this, 'assettag-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="assettag-filter-items">
                                                        @{
                                                            var selectedAssetTags = ViewData["AssetTagFilter"]?.ToString()?.Split(',').Select(s => s.Trim()).ToList() ?? new List<string>();
                                                        }
                                                        @foreach (var assetTag in ViewData["AssetTagOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <div class="form-check">
                                                                    <input class="form-check-input multi-filter-checkbox" type="checkbox" 
                                                                           id="assettag-@assetTag.Replace(" ", "-")" 
                                                                           value="@assetTag" 
                                                                           data-filter-type="assettag"
                                                                           @(selectedAssetTags.Contains(assetTag) ? "checked" : "")>
                                                                    <label class="form-check-label" for="assettag-@assetTag.Replace(" ", "-")">
                                                                        @assetTag
                                                                    </label>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2 d-flex gap-2">
                                                        <button class="btn btn-sm btn-outline-primary" onclick="applyMultiFilter('assettag')">Apply</button>
                                                        <button class="btn btn-sm btn-outline-secondary" onclick="clearMultiFilter('assettag')">Clear</button>
                                                        <button class="btn btn-sm btn-outline-info" onclick="selectAllMultiFilter('assettag')">Select All</button>
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-service-tag">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["ServiceTagSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" class="text-decoration-none me-2">
                                            Service Tag
                                            @if (ViewData["CurrentSort"]?.ToString() == "service_tag_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "service_tag")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["ServiceTagFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                                <span class="filter-count" id="servicetag-filter-count"></span>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 400px; overflow-y: auto; min-width: 280px;">
                                                <li><h6 class="dropdown-header">Filter by Service Tag</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search service tags..." 
                                                               onkeyup="filterDropdownItems(this, 'servicetag-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="servicetag-filter-items">
                                                        @{
                                                            var selectedServiceTags = ViewData["ServiceTagFilter"]?.ToString()?.Split(',').Select(s => s.Trim()).ToList() ?? new List<string>();
                                                        }
                                                        @foreach (var serviceTag in ViewData["ServiceTagOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <div class="form-check">
                                                                    <input class="form-check-input multi-filter-checkbox" type="checkbox" 
                                                                           id="servicetag-@serviceTag.Replace(" ", "-")" 
                                                                           value="@serviceTag" 
                                                                           data-filter-type="servicetag"
                                                                           @(selectedServiceTags.Contains(serviceTag) ? "checked" : "")>
                                                                    <label class="form-check-label" for="servicetag-@serviceTag.Replace(" ", "-")">
                                                                        @serviceTag
                                                                    </label>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2 d-flex gap-2">
                                                        <button class="btn btn-sm btn-outline-primary" onclick="applyMultiFilter('servicetag')">Apply</button>
                                                        <button class="btn btn-sm btn-outline-secondary" onclick="clearMultiFilter('servicetag')">Clear</button>
                                                        <button class="btn btn-sm btn-outline-info" onclick="selectAllMultiFilter('servicetag')">Select All</button>
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-ip-address">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["IPAddressSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" class="text-decoration-none me-2">
                                            IP Address
                                            @if (ViewData["CurrentSort"]?.ToString() == "ip_address_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "ip_address")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["IPAddressFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                                <span class="filter-count" id="ipaddress-filter-count"></span>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 400px; overflow-y: auto; min-width: 280px;">
                                                <li><h6 class="dropdown-header">Filter by IP Address</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search IP addresses..." 
                                                               onkeyup="filterDropdownItems(this, 'ipaddress-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="ipaddress-filter-items">
                                                        @{
                                                            var selectedIPAddresses = ViewData["IPAddressFilter"]?.ToString()?.Split(',').Select(s => s.Trim()).ToList() ?? new List<string>();
                                                        }
                                                        @foreach (var ipAddress in ViewData["IPAddressOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <div class="form-check">
                                                                    <input class="form-check-input multi-filter-checkbox" type="checkbox" 
                                                                           id="ipaddress-@ipAddress.Replace(" ", "-")" 
                                                                           value="@ipAddress" 
                                                                           data-filter-type="ipaddress"
                                                                           @(selectedIPAddresses.Contains(ipAddress) ? "checked" : "")>
                                                                    <label class="form-check-label" for="ipaddress-@ipAddress.Replace(" ", "-")">
                                                                        @ipAddress
                                                                    </label>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2 d-flex gap-2">
                                                        <button class="btn btn-sm btn-outline-primary" onclick="applyMultiFilter('ipaddress')">Apply</button>
                                                        <button class="btn btn-sm btn-outline-secondary" onclick="clearMultiFilter('ipaddress')">Clear</button>
                                                        <button class="btn btn-sm btn-outline-info" onclick="selectAllMultiFilter('ipaddress')">Select All</button>
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-os-version">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["OSVersionSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" class="text-decoration-none me-2">
                                            OS Version
                                            @if (ViewData["CurrentSort"]?.ToString() == "os_version_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "os_version")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["OSVersionFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                                <span class="filter-count" id="osversion-filter-count"></span>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 400px; overflow-y: auto; min-width: 280px;">
                                                <li><h6 class="dropdown-header">Filter by OS Version</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search OS versions..." 
                                                               onkeyup="filterDropdownItems(this, 'osversion-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="osversion-filter-items">
                                                        @{
                                                            var selectedOSVersions = ViewData["OSVersionFilter"]?.ToString()?.Split(',').Select(s => s.Trim()).ToList() ?? new List<string>();
                                                        }
                                                        @foreach (var osVersion in ViewData["OSVersionOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <div class="form-check">
                                                                    <input class="form-check-input multi-filter-checkbox" type="checkbox" 
                                                                           id="osversion-@osVersion.Replace(" ", "-")" 
                                                                           value="@osVersion" 
                                                                           data-filter-type="osversion"
                                                                           @(selectedOSVersions.Contains(osVersion) ? "checked" : "")>
                                                                    <label class="form-check-label" for="osversion-@osVersion.Replace(" ", "-")">
                                                                        @osVersion
                                                                    </label>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2 d-flex gap-2">
                                                        <button class="btn btn-sm btn-outline-primary" onclick="applyMultiFilter('osversion')">Apply</button>
                                                        <button class="btn btn-sm btn-outline-secondary" onclick="clearMultiFilter('osversion')">Clear</button>
                                                        <button class="btn btn-sm btn-outline-info" onclick="selectAllMultiFilter('osversion')">Select All</button>
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-phone-number">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["PhoneNumberSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" class="text-decoration-none me-2">
                                            Phone Number
                                            @if (ViewData["CurrentSort"]?.ToString() == "phone_number_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "phone_number")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["PhoneNumberFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                                <span class="filter-count" id="phonenumber-filter-count"></span>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 400px; overflow-y: auto; min-width: 280px;">
                                                <li><h6 class="dropdown-header">Filter by Phone Number</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search phone numbers..." 
                                                               onkeyup="filterDropdownItems(this, 'phonenumber-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="phonenumber-filter-items">
                                                        @{
                                                            var selectedPhoneNumbers = ViewData["PhoneNumberFilter"]?.ToString()?.Split(',').Select(s => s.Trim()).ToList() ?? new List<string>();
                                                        }
                                                        @foreach (var phoneNumber in ViewData["PhoneNumberOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <div class="form-check">
                                                                    <input class="form-check-input multi-filter-checkbox" type="checkbox" 
                                                                           id="phonenumber-@phoneNumber.Replace(" ", "-")" 
                                                                           value="@phoneNumber" 
                                                                           data-filter-type="phonenumber"
                                                                           @(selectedPhoneNumbers.Contains(phoneNumber) ? "checked" : "")>
                                                                    <label class="form-check-label" for="phonenumber-@phoneNumber.Replace(" ", "-")">
                                                                        @phoneNumber
                                                                    </label>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2 d-flex gap-2">
                                                        <button class="btn btn-sm btn-outline-primary" onclick="applyMultiFilter('phonenumber')">Apply</button>
                                                        <button class="btn btn-sm btn-outline-secondary" onclick="clearMultiFilter('phonenumber')">Clear</button>
                                                        <button class="btn btn-sm btn-outline-info" onclick="selectAllMultiFilter('phonenumber')">Select All</button>
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-purchase-price">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["PurchasePriceSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" class="text-decoration-none me-2">
                                            Purchase Price
                                            @if (ViewData["CurrentSort"]?.ToString() == "purchase_price_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "purchase_price")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["PurchasePriceFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                                <span class="filter-count" id="purchaseprice-filter-count"></span>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 400px; overflow-y: auto; min-width: 280px;">
                                                <li><h6 class="dropdown-header">Filter by Purchase Price</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search purchase prices..." 
                                                               onkeyup="filterDropdownItems(this, 'purchaseprice-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="purchaseprice-filter-items">
                                                        @{
                                                            var selectedPurchasePrices = ViewData["PurchasePriceFilter"]?.ToString()?.Split(',').Select(s => s.Trim()).ToList() ?? new List<string>();
                                                        }
                                                        @foreach (var purchasePrice in ViewData["PurchasePriceOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <div class="form-check">
                                                                    <input class="form-check-input multi-filter-checkbox" type="checkbox" 
                                                                           id="purchaseprice-@purchasePrice.Replace(" ", "-")" 
                                                                           value="@purchasePrice" 
                                                                           data-filter-type="purchaseprice"
                                                                           @(selectedPurchasePrices.Contains(purchasePrice) ? "checked" : "")>
                                                                    <label class="form-check-label" for="purchaseprice-@purchasePrice.Replace(" ", "-")">
                                                                        @purchasePrice
                                                                    </label>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2 d-flex gap-2">
                                                        <button class="btn btn-sm btn-outline-primary" onclick="applyMultiFilter('purchaseprice')">Apply</button>
                                                        <button class="btn btn-sm btn-outline-secondary" onclick="clearMultiFilter('purchaseprice')">Clear</button>
                                                        <button class="btn btn-sm btn-outline-info" onclick="selectAllMultiFilter('purchaseprice')">Select All</button>
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-warranty-end">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["WarrantyEndSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" class="text-decoration-none me-2">
                                            Warranty End
                                            @if (ViewData["CurrentSort"]?.ToString() == "warranty_end_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "warranty_end")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["WarrantyEndFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                                <span class="filter-count" id="warrantyend-filter-count"></span>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 400px; overflow-y: auto; min-width: 280px;">
                                                <li><h6 class="dropdown-header">Filter by Warranty End</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search warranty end dates..." 
                                                               onkeyup="filterDropdownItems(this, 'warrantyend-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="warrantyend-filter-items">
                                                        @{
                                                            var selectedWarrantyEnds = ViewData["WarrantyEndFilter"]?.ToString()?.Split(',').Select(s => s.Trim()).ToList() ?? new List<string>();
                                                        }
                                                        @foreach (var warrantyEnd in ViewData["WarrantyEndOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <div class="form-check">
                                                                    <input class="form-check-input multi-filter-checkbox" type="checkbox" 
                                                                           id="warrantyend-@warrantyEnd.Replace(" ", "-")" 
                                                                           value="@warrantyEnd" 
                                                                           data-filter-type="warrantyend"
                                                                           @(selectedWarrantyEnds.Contains(warrantyEnd) ? "checked" : "")>
                                                                    <label class="form-check-label" for="warrantyend-@warrantyEnd.Replace(" ", "-")">
                                                                        @warrantyEnd
                                                                    </label>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2 d-flex gap-2">
                                                        <button class="btn btn-sm btn-outline-primary" onclick="applyMultiFilter('warrantyend')">Apply</button>
                                                        <button class="btn btn-sm btn-outline-secondary" onclick="clearMultiFilter('warrantyend')">Clear</button>
                                                        <button class="btn btn-sm btn-outline-info" onclick="selectAllMultiFilter('warrantyend')">Select All</button>
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-notes">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["NotesSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" class="text-decoration-none me-2">
                                            Notes
                                            @if (ViewData["CurrentSort"]?.ToString() == "notes_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "notes")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["NotesFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                                <span class="filter-count" id="notes-filter-count"></span>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 400px; overflow-y: auto; min-width: 280px;">
                                                <li><h6 class="dropdown-header">Filter by Notes</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search notes..." 
                                                               onkeyup="filterDropdownItems(this, 'notes-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="notes-filter-items">
                                                        @{
                                                            var selectedNotes = ViewData["NotesFilter"]?.ToString()?.Split(',').Select(s => s.Trim()).ToList() ?? new List<string>();
                                                        }
                                                        @foreach (var note in ViewData["NotesOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <div class="form-check">
                                                                    <input class="form-check-input multi-filter-checkbox" type="checkbox" 
                                                                           id="notes-@note.Replace(" ", "-")" 
                                                                           value="@note" 
                                                                           data-filter-type="notes"
                                                                           @(selectedNotes.Contains(note) ? "checked" : "")>
                                                                    <label class="form-check-label" for="notes-@note.Replace(" ", "-")">
                                                                        @note
                                                                    </label>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2 d-flex gap-2">
                                                        <button class="btn btn-sm btn-outline-primary" onclick="applyMultiFilter('notes')">Apply</button>
                                                        <button class="btn btn-sm btn-outline-secondary" onclick="clearMultiFilter('notes')">Clear</button>
                                                        <button class="btn btn-sm btn-outline-info" onclick="selectAllMultiFilter('notes')">Select All</button>
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                
                                <!-- Technology Configuration Headers -->
                                <th class="column-mac-address">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["MACAddressSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" class="text-decoration-none me-2">
                                            MAC Address
                                            @if (ViewData["CurrentSort"]?.ToString() == "macaddress_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "macaddress")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["MACAddressFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                                <span class="filter-count" id="macaddress-filter-count"></span>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 400px; overflow-y: auto; min-width: 280px;">
                                                <li><h6 class="dropdown-header">Filter by MAC Address</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search MAC addresses..." 
                                                               onkeyup="filterDropdownItems(this, 'macaddress-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="macaddress-filter-items">
                                                        @{
                                                            var selectedMACAddresses = ViewData["MACAddressFilter"]?.ToString()?.Split(',').Select(s => s.Trim()).ToList() ?? new List<string>();
                                                        }
                                                        @foreach (var macAddress in ViewData["MACAddressOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <div class="form-check">
                                                                    <input class="form-check-input multi-filter-checkbox" type="checkbox" 
                                                                           id="macaddress-@macAddress.Replace(" ", "-")" 
                                                                           value="@macAddress" 
                                                                           data-filter-type="macaddress"
                                                                           @(selectedMACAddresses.Contains(macAddress) ? "checked" : "")>
                                                                    <label class="form-check-label" for="macaddress-@macAddress.Replace(" ", "-")">
                                                                        @macAddress
                                                                    </label>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2 d-flex gap-2">
                                                        <button class="btn btn-sm btn-outline-primary" onclick="applyMultiFilter('macaddress')">Apply</button>
                                                        <button class="btn btn-sm btn-outline-secondary" onclick="clearMultiFilter('macaddress')">Clear</button>
                                                        <button class="btn btn-sm btn-outline-info" onclick="selectAllMultiFilter('macaddress')">Select All</button>
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-wall-port">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["WallPortSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" class="text-decoration-none me-2">
                                            Wall Port
                                            @if (ViewData["CurrentSort"]?.ToString() == "wallport_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "wallport")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["WallPortFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                                <span class="filter-count" id="wallport-filter-count"></span>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 400px; overflow-y: auto; min-width: 280px;">
                                                <li><h6 class="dropdown-header">Filter by Wall Port</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search wall ports..." 
                                                               onkeyup="filterDropdownItems(this, 'wallport-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="wallport-filter-items">
                                                        @{
                                                            var selectedWallPorts = ViewData["WallPortFilter"]?.ToString()?.Split(',').Select(s => s.Trim()).ToList() ?? new List<string>();
                                                        }
                                                        @foreach (var wallPort in ViewData["WallPortOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <div class="form-check">
                                                                    <input class="form-check-input multi-filter-checkbox" type="checkbox" 
                                                                           id="wallport-@wallPort.Replace(" ", "-")" 
                                                                           value="@wallPort" 
                                                                           data-filter-type="wallport"
                                                                           @(selectedWallPorts.Contains(wallPort) ? "checked" : "")>
                                                                    <label class="form-check-label" for="wallport-@wallPort.Replace(" ", "-")">
                                                                        @wallPort
                                                                    </label>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2 d-flex gap-2">
                                                        <button class="btn btn-sm btn-outline-primary" onclick="applyMultiFilter('wallport')">Apply</button>
                                                        <button class="btn btn-sm btn-outline-secondary" onclick="clearMultiFilter('wallport')">Clear</button>
                                                        <button class="btn btn-sm btn-outline-info" onclick="selectAllMultiFilter('wallport')">Select All</button>
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-switch-name">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["SwitchNameSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" class="text-decoration-none me-2">
                                            Switch Name
                                            @if (ViewData["CurrentSort"]?.ToString() == "switchname_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "switchname")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["SwitchNameFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                                <span class="filter-count" id="switchname-filter-count"></span>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 400px; overflow-y: auto; min-width: 280px;">
                                                <li><h6 class="dropdown-header">Filter by Switch Name</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search switch names..." 
                                                               onkeyup="filterDropdownItems(this, 'switchname-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="switchname-filter-items">
                                                        @{
                                                            var selectedSwitchNames = ViewData["SwitchNameFilter"]?.ToString()?.Split(',').Select(s => s.Trim()).ToList() ?? new List<string>();
                                                        }
                                                        @foreach (var switchName in ViewData["SwitchNameOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <div class="form-check">
                                                                    <input class="form-check-input multi-filter-checkbox" type="checkbox" 
                                                                           id="switchname-@switchName.Replace(" ", "-")" 
                                                                           value="@switchName" 
                                                                           data-filter-type="switchname"
                                                                           @(selectedSwitchNames.Contains(switchName) ? "checked" : "")>
                                                                    <label class="form-check-label" for="switchname-@switchName.Replace(" ", "-")">
                                                                        @switchName
                                                                    </label>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2 d-flex gap-2">
                                                        <button class="btn btn-sm btn-outline-primary" onclick="applyMultiFilter('switchname')">Apply</button>
                                                        <button class="btn btn-sm btn-outline-secondary" onclick="clearMultiFilter('switchname')">Clear</button>
                                                        <button class="btn btn-sm btn-outline-info" onclick="selectAllMultiFilter('switchname')">Select All</button>
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-switch-port">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["SwitchPortSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" class="text-decoration-none me-2">
                                            Switch Port
                                            @if (ViewData["CurrentSort"]?.ToString() == "switchport_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "switchport")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["SwitchPortFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                                <span class="filter-count" id="switchport-filter-count"></span>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 400px; overflow-y: auto; min-width: 280px;">
                                                <li><h6 class="dropdown-header">Filter by Switch Port</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search switch ports..." 
                                                               onkeyup="filterDropdownItems(this, 'switchport-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="switchport-filter-items">
                                                        @{
                                                            var selectedSwitchPorts = ViewData["SwitchPortFilter"]?.ToString()?.Split(',').Select(s => s.Trim()).ToList() ?? new List<string>();
                                                        }
                                                        @foreach (var switchPort in ViewData["SwitchPortOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <div class="form-check">
                                                                    <input class="form-check-input multi-filter-checkbox" type="checkbox" 
                                                                           id="switchport-@switchPort.Replace(" ", "-")" 
                                                                           value="@switchPort" 
                                                                           data-filter-type="switchport"
                                                                           @(selectedSwitchPorts.Contains(switchPort) ? "checked" : "")>
                                                                    <label class="form-check-label" for="switchport-@switchPort.Replace(" ", "-")">
                                                                        @switchPort
                                                                    </label>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2 d-flex gap-2">
                                                        <button class="btn btn-sm btn-outline-primary" onclick="applyMultiFilter('switchport')">Apply</button>
                                                        <button class="btn btn-sm btn-outline-secondary" onclick="clearMultiFilter('switchport')">Clear</button>
                                                        <button class="btn btn-sm btn-outline-info" onclick="selectAllMultiFilter('switchport')">Select All</button>
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-extension">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["ExtensionSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" class="text-decoration-none me-2">
                                            Extension
                                            @if (ViewData["CurrentSort"]?.ToString() == "extension_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "extension")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["ExtensionFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                                <span class="filter-count" id="extension-filter-count"></span>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 400px; overflow-y: auto; min-width: 280px;">
                                                <li><h6 class="dropdown-header">Filter by Extension</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search extensions..." 
                                                               onkeyup="filterDropdownItems(this, 'extension-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="extension-filter-items">
                                                        @{
                                                            var selectedExtensions = ViewData["ExtensionFilter"]?.ToString()?.Split(',').Select(s => s.Trim()).ToList() ?? new List<string>();
                                                        }
                                                        @foreach (var extension in ViewData["ExtensionOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <div class="form-check">
                                                                    <input class="form-check-input multi-filter-checkbox" type="checkbox" 
                                                                           id="extension-@extension.Replace(" ", "-")" 
                                                                           value="@extension" 
                                                                           data-filter-type="extension"
                                                                           @(selectedExtensions.Contains(extension) ? "checked" : "")>
                                                                    <label class="form-check-label" for="extension-@extension.Replace(" ", "-")">
                                                                        @extension
                                                                    </label>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2 d-flex gap-2">
                                                        <button class="btn btn-sm btn-outline-primary" onclick="applyMultiFilter('extension')">Apply</button>
                                                        <button class="btn btn-sm btn-outline-secondary" onclick="clearMultiFilter('extension')">Clear</button>
                                                        <button class="btn btn-sm btn-outline-info" onclick="selectAllMultiFilter('extension')">Select All</button>
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-imei">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["IMEISortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" class="text-decoration-none me-2">
                                            IMEI
                                            @if (ViewData["CurrentSort"]?.ToString() == "imei_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "imei")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["IMEIFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                                <span class="filter-count" id="imei-filter-count"></span>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 400px; overflow-y: auto; min-width: 280px;">
                                                <li><h6 class="dropdown-header">Filter by IMEI</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search IMEI..." 
                                                               onkeyup="filterDropdownItems(this, 'imei-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="imei-filter-items">
                                                        @{
                                                            var selectedIMEIs = ViewData["IMEIFilter"]?.ToString()?.Split(',').Select(s => s.Trim()).ToList() ?? new List<string>();
                                                        }
                                                        @foreach (var imei in ViewData["IMEIOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <div class="form-check">
                                                                    <input class="form-check-input multi-filter-checkbox" type="checkbox" 
                                                                           id="imei-@imei.Replace(" ", "-")" 
                                                                           value="@imei" 
                                                                           data-filter-type="imei"
                                                                           @(selectedIMEIs.Contains(imei) ? "checked" : "")>
                                                                    <label class="form-check-label" for="imei-@imei.Replace(" ", "-")">
                                                                        @imei
                                                                    </label>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2 d-flex gap-2">
                                                        <button class="btn btn-sm btn-outline-primary" onclick="applyMultiFilter('imei')">Apply</button>
                                                        <button class="btn btn-sm btn-outline-secondary" onclick="clearMultiFilter('imei')">Clear</button>
                                                        <button class="btn btn-sm btn-outline-info" onclick="selectAllMultiFilter('imei')">Select All</button>
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-sim-card">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["SIMCardSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" class="text-decoration-none me-2">
                                            SIM Card
                                            @if (ViewData["CurrentSort"]?.ToString() == "simcard_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "simcard")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["SIMCardFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                                <span class="filter-count" id="simcard-filter-count"></span>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 400px; overflow-y: auto; min-width: 280px;">
                                                <li><h6 class="dropdown-header">Filter by SIM Card</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search SIM cards..." 
                                                               onkeyup="filterDropdownItems(this, 'simcard-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="simcard-filter-items">
                                                        @{
                                                            var selectedSIMCards = ViewData["SIMCardFilter"]?.ToString()?.Split(',').Select(s => s.Trim()).ToList() ?? new List<string>();
                                                        }
                                                        @foreach (var simCard in ViewData["SIMCardOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <div class="form-check">
                                                                    <input class="form-check-input multi-filter-checkbox" type="checkbox" 
                                                                           id="simcard-@simCard.Replace(" ", "-")" 
                                                                           value="@simCard" 
                                                                           data-filter-type="simcard"
                                                                           @(selectedSIMCards.Contains(simCard) ? "checked" : "")>
                                                                    <label class="form-check-label" for="simcard-@simCard.Replace(" ", "-")">
                                                                        @simCard
                                                                    </label>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2 d-flex gap-2">
                                                        <button class="btn btn-sm btn-outline-primary" onclick="applyMultiFilter('simcard')">Apply</button>
                                                        <button class="btn btn-sm btn-outline-secondary" onclick="clearMultiFilter('simcard')">Clear</button>
                                                        <button class="btn btn-sm btn-outline-info" onclick="selectAllMultiFilter('simcard')">Select All</button>
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-config-notes">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["ConfigNotesSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" class="text-decoration-none me-2">
                                            Config Notes
                                            @if (ViewData["CurrentSort"]?.ToString() == "confignotes_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "confignotes")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["ConfigNotesFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                                <span class="filter-count" id="confignotes-filter-count"></span>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 400px; overflow-y: auto; min-width: 280px;">
                                                <li><h6 class="dropdown-header">Filter by Config Notes</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search config notes..." 
                                                               onkeyup="filterDropdownItems(this, 'confignotes-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="confignotes-filter-items">
                                                        @{
                                                            var selectedConfigNotes = ViewData["ConfigNotesFilter"]?.ToString()?.Split(',').Select(s => s.Trim()).ToList() ?? new List<string>();
                                                        }
                                                        @foreach (var configNote in ViewData["ConfigNotesOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <div class="form-check">
                                                                    <input class="form-check-input multi-filter-checkbox" type="checkbox" 
                                                                           id="confignotes-@configNote.Replace(" ", "-")" 
                                                                           value="@configNote" 
                                                                           data-filter-type="confignotes"
                                                                           @(selectedConfigNotes.Contains(configNote) ? "checked" : "")>
                                                                    <label class="form-check-label" for="confignotes-@configNote.Replace(" ", "-")">
                                                                        @configNote
                                                                    </label>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2 d-flex gap-2">
                                                        <button class="btn btn-sm btn-outline-primary" onclick="applyMultiFilter('confignotes')">Apply</button>
                                                        <button class="btn btn-sm btn-outline-secondary" onclick="clearMultiFilter('confignotes')">Clear</button>
                                                        <button class="btn btn-sm btn-outline-info" onclick="selectAllMultiFilter('confignotes')">Select All</button>
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-created-at">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["CreatedAtSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" class="text-decoration-none me-2">
                                            Created At
                                            @if (ViewData["CurrentSort"]?.ToString() == "created_at_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "created_at")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                    </div>
                                </th>
                                <th class="column-updated-at">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["UpdatedAtSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" class="text-decoration-none me-2">
                                            Updated At
                                            @if (ViewData["CurrentSort"]?.ToString() == "updated_at_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "updated_at")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                    </div>
                                </th>
                                <th class="actions-header">
                                    <div class="d-flex align-items-center justify-content-between">
                                        <span>Actions</span>
                                        <div class="d-flex gap-1">
                                            <button class="btn btn-sm btn-outline-success" type="button" onclick="exportToExcel()" title="Export to Excel">
                                                <i class="bi bi-file-earmark-excel"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-secondary" type="button" data-bs-toggle="modal" data-bs-target="#columnSettingsModal" title="Column Settings">
                                                <i class="bi bi-gear"></i>
                                            </button>
                                        </div>
                                    </div>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Debug: Equipment IDs on this page: @string.Join(", ", Model.Select(e => e.Id)) -->
                            @foreach (var item in Model)
                            {
                                <tr class="equipment-row" data-equipment-id="@item.Id" data-oath-tag="@item.OATH_Tag">
                                    <!-- Debug: Equipment ID @item.Id, OATH Tag @item.OATH_Tag -->
                                    <td class="column-oath-tag editable-cell" data-field="OATH_Tag" data-value="@item.OATH_Tag" style="cursor: pointer;">@item.OATH_Tag</td>
                                    <td class="column-assigned-to editable-cell" data-field="Assigned_User_Name" data-value="@(item.Assigned_User_Name ?? "")" style="cursor: pointer;">@(item.Assigned_User_Name ?? "Unassigned")</td>
                                    <td class="column-category editable-cell" data-field="AssetCategoryId" data-value="@(item.AssetCategory?.Name ?? "")" style="cursor: pointer;">@(item.AssetCategory?.Name ?? "Unknown")</td>
                                    <td class="column-unit editable-cell" data-field="Department" data-value="@(item.Department ?? "")" style="cursor: pointer;">@(item.Department ?? "Unknown")</td>
                                    <td class="column-location editable-cell" data-field="CurrentLocationId" data-value="@(item.CurrentLocation?.Name ?? "Unknown")" style="cursor: pointer;">@(item.CurrentLocation?.Name ?? "Unknown")</td>
                                    <td class="column-floor editable-cell" data-field="CurrentFloorPlanId" data-value="@(item.CurrentFloorPlan?.FloorName ?? "Unknown")" style="cursor: pointer;">@(item.CurrentFloorPlan?.FloorName ?? "Unknown")</td>
                                    <td class="column-status editable-cell" data-field="CurrentStatusId" data-value="@(item.CurrentStatus?.Name ?? "")" style="cursor: pointer;">@(item.CurrentStatus?.Name ?? "Unknown")</td>
                                    <td class="column-net-name editable-cell" data-field="NetName" data-value="@(item.TechnologyConfiguration?.NetName ?? "")" style="cursor: pointer;">@(item.TechnologyConfiguration?.NetName ?? "N/A")</td>
                                    <td class="column-model editable-cell" data-field="Model" data-value="@(item.Model ?? "")" style="cursor: pointer;">@(item.Model ?? "Unknown")</td>
                                    <td class="column-serial-number editable-cell" data-field="Serial_Number" data-value="@(item.Serial_Number ?? "")" style="cursor: pointer;">@(item.Serial_Number ?? "N/A")</td>
                                    <td class="column-desk-number editable-cell" data-field="CurrentDeskId" data-value="@(item.CurrentDesk?.DeskName ?? "")" style="cursor: pointer;">@(item.CurrentDesk?.DeskName ?? "N/A")</td>
                                    <td class="column-manufacturer editable-cell" data-field="Manufacturer" data-value="@(item.Manufacturer ?? "")" style="cursor: pointer;">@(item.Manufacturer ?? "Unknown")</td>
                                    <td class="column-purchase-date editable-cell" data-field="PurchaseDate" data-value="@(item.PurchaseDate?.ToString("MM/dd/yyyy") ?? "")" style="cursor: pointer;">@(item.PurchaseDate?.ToString("MM/dd/yyyy") ?? "N/A")</td>
                                    <td class="column-asset-tag editable-cell" data-field="Asset_Tag" data-value="@(item.Asset_Tag ?? "")" style="cursor: pointer;" title="@(item.Asset_Tag ?? "N/A")">@(string.IsNullOrEmpty(item.Asset_Tag) ? "N/A" : (item.Asset_Tag.Length > 15 ? item.Asset_Tag.Substring(0, 15) + "..." : item.Asset_Tag))</td>
                                    <td class="column-service-tag editable-cell" data-field="Service_Tag" data-value="@(item.Service_Tag ?? "")" style="cursor: pointer;" title="@(item.Service_Tag ?? "N/A")">@(string.IsNullOrEmpty(item.Service_Tag) ? "N/A" : (item.Service_Tag.Length > 15 ? item.Service_Tag.Substring(0, 15) + "..." : item.Service_Tag))</td>
                                    <td class="column-ip-address editable-cell" data-field="IP_Address" data-value="@(item.IP_Address ?? "")" style="cursor: pointer;" title="@(item.IP_Address ?? "N/A")">@(string.IsNullOrEmpty(item.IP_Address) ? "N/A" : (item.IP_Address.Length > 15 ? item.IP_Address.Substring(0, 15) + "..." : item.IP_Address))</td>
                                    <td class="column-os-version editable-cell" data-field="OS_Version" data-value="@(item.OS_Version ?? "")" style="cursor: pointer;" title="@(item.OS_Version ?? "N/A")">@(string.IsNullOrEmpty(item.OS_Version) ? "N/A" : (item.OS_Version.Length > 15 ? item.OS_Version.Substring(0, 15) + "..." : item.OS_Version))</td>
                                    <td class="column-phone-number editable-cell" data-field="PhoneNumber" data-value="@(item.TechnologyConfiguration?.PhoneNumber ?? "")" style="cursor: pointer;" title="@(item.TechnologyConfiguration?.PhoneNumber ?? "N/A")">@(string.IsNullOrEmpty(item.TechnologyConfiguration?.PhoneNumber) ? "N/A" : (item.TechnologyConfiguration.PhoneNumber.Length > 15 ? item.TechnologyConfiguration.PhoneNumber.Substring(0, 15) + "..." : item.TechnologyConfiguration.PhoneNumber))</td>
                                    <td class="column-purchase-price editable-cell" data-field="PurchasePrice" data-value="@(item.PurchasePrice?.ToString() ?? "")" style="cursor: pointer;" title="@(item.PurchasePrice?.ToString("C") ?? "N/A")">@(item.PurchasePrice?.ToString("C") ?? "N/A")</td>
                                    <td class="column-warranty-end editable-cell" data-field="WarrantyEndDate" data-value="@(item.WarrantyEndDate?.ToString("MM/dd/yyyy") ?? "")" style="cursor: pointer;" title="@(item.WarrantyEndDate?.ToString("MM/dd/yyyy") ?? "N/A")">@(item.WarrantyEndDate?.ToString("MM/dd/yyyy") ?? "N/A")</td>
                                                                    <td class="column-notes editable-cell" data-field="Notes" data-value="@(item.Notes ?? "")" style="cursor: pointer;" title="@(item.Notes ?? "N/A")">@(string.IsNullOrEmpty(item.Notes) ? "N/A" : (item.Notes.Length > 20 ? item.Notes.Substring(0, 20) + "..." : item.Notes))</td>
                                
                                <!-- Technology Configuration Columns -->
                                <td class="column-mac-address editable-cell" data-field="MACAddress" data-value="@(item.TechnologyConfiguration?.MACAddress ?? "")" style="cursor: pointer;" title="@(item.TechnologyConfiguration?.MACAddress ?? "N/A")">@(string.IsNullOrEmpty(item.TechnologyConfiguration?.MACAddress) ? "N/A" : (item.TechnologyConfiguration.MACAddress.Length > 15 ? item.TechnologyConfiguration.MACAddress.Substring(0, 15) + "..." : item.TechnologyConfiguration.MACAddress))</td>
                                <td class="column-wall-port editable-cell" data-field="WallPort" data-value="@(item.TechnologyConfiguration?.WallPort ?? "")" style="cursor: pointer;" title="@(item.TechnologyConfiguration?.WallPort ?? "N/A")">@(string.IsNullOrEmpty(item.TechnologyConfiguration?.WallPort) ? "N/A" : (item.TechnologyConfiguration.WallPort.Length > 15 ? item.TechnologyConfiguration.WallPort.Substring(0, 15) + "..." : item.TechnologyConfiguration.WallPort))</td>
                                <td class="column-switch-name editable-cell" data-field="SwitchName" data-value="@(item.TechnologyConfiguration?.SwitchName ?? "")" style="cursor: pointer;" title="@(item.TechnologyConfiguration?.SwitchName ?? "N/A")">@(string.IsNullOrEmpty(item.TechnologyConfiguration?.SwitchName) ? "N/A" : (item.TechnologyConfiguration.SwitchName.Length > 15 ? item.TechnologyConfiguration.SwitchName.Substring(0, 15) + "..." : item.TechnologyConfiguration.SwitchName))</td>
                                <td class="column-switch-port editable-cell" data-field="SwitchPort" data-value="@(item.TechnologyConfiguration?.SwitchPort ?? "")" style="cursor: pointer;" title="@(item.TechnologyConfiguration?.SwitchPort ?? "N/A")">@(string.IsNullOrEmpty(item.TechnologyConfiguration?.SwitchPort) ? "N/A" : (item.TechnologyConfiguration.SwitchPort.Length > 15 ? item.TechnologyConfiguration.SwitchPort.Substring(0, 15) + "..." : item.TechnologyConfiguration.SwitchPort))</td>
                                <td class="column-extension editable-cell" data-field="Extension" data-value="@(item.TechnologyConfiguration?.Extension ?? "")" style="cursor: pointer;" title="@(item.TechnologyConfiguration?.Extension ?? "N/A")">@(item.TechnologyConfiguration?.Extension ?? "N/A")</td>
                                <td class="column-imei editable-cell" data-field="IMEI" data-value="@(item.TechnologyConfiguration?.IMEI ?? "")" style="cursor: pointer;" title="@(item.TechnologyConfiguration?.IMEI ?? "N/A")">@(string.IsNullOrEmpty(item.TechnologyConfiguration?.IMEI) ? "N/A" : (item.TechnologyConfiguration.IMEI.Length > 15 ? item.TechnologyConfiguration.IMEI.Substring(0, 15) + "..." : item.TechnologyConfiguration.IMEI))</td>
                                <td class="column-sim-card editable-cell" data-field="SIMCardNumber" data-value="@(item.TechnologyConfiguration?.SIMCardNumber ?? "")" style="cursor: pointer;" title="@(item.TechnologyConfiguration?.SIMCardNumber ?? "N/A")">@(string.IsNullOrEmpty(item.TechnologyConfiguration?.SIMCardNumber) ? "N/A" : (item.TechnologyConfiguration.SIMCardNumber.Length > 15 ? item.TechnologyConfiguration.SIMCardNumber.Substring(0, 15) + "..." : item.TechnologyConfiguration.SIMCardNumber))</td>
                                <td class="column-config-notes editable-cell" data-field="ConfigurationNotes" data-value="@(item.TechnologyConfiguration?.ConfigurationNotes ?? "")" style="cursor: pointer;" title="@(item.TechnologyConfiguration?.ConfigurationNotes ?? "N/A")">@(string.IsNullOrEmpty(item.TechnologyConfiguration?.ConfigurationNotes) ? "N/A" : (item.TechnologyConfiguration.ConfigurationNotes.Length > 20 ? item.TechnologyConfiguration.ConfigurationNotes.Substring(0, 20) + "..." : item.TechnologyConfiguration.ConfigurationNotes))</td>
                                
                                <td class="column-created-at" title="@(item.CreatedAt.ToString("MM/dd/yyyy HH:mm"))">@(item.CreatedAt.ToString("MM/dd/yyyy"))</td>
                                <td class="column-updated-at" title="@(item.UpdatedAt?.ToString("MM/dd/yyyy HH:mm") ?? "N/A")">@(item.UpdatedAt?.ToString("MM/dd/yyyy") ?? "N/A")</td>
                                    <td>
                                        <div class="btn-group btn-group-sm" role="group">
                                            <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-outline-primary" title="View Details">
                                                <i class="bi bi-eye"></i>
                                            </a>
                                            <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-outline-secondary" title="Edit">
                                                <i class="bi bi-pencil"></i>
                                            </a>
                                            <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-outline-danger" title="Delete">
                                                <i class="bi bi-trash"></i>
                                            </a>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                </div>

                <!-- Pagination -->
                <div class="d-flex justify-content-between align-items-center mt-3">
                    <div class="d-flex align-items-center">
                        <span class="text-muted me-3">
                            @{
                                var currentPageSize = ViewData["CurrentPageSize"] as int? ?? 20;
                                var startItem = (Model.PageIndex - 1) * currentPageSize + 1;
                                var endItem = Math.Min(Model.PageIndex * currentPageSize, Model.TotalCount);
                            }
                            Showing @startItem to @endItem of @Model.TotalCount entries
                        </span>
                        <div class="d-flex align-items-center">
                            <label class="form-label me-2 mb-0">Show:</label>
                            <select class="form-select form-select-sm" style="width: auto;" onchange="changePageSize(this.value)">
                                @{
                                    var pageSizeOptions = new List<int> { 10, 25, 50, 100 };
                                    var pageSize = ViewData["CurrentPageSize"] as int? ?? 20;
                                }
                                @foreach (var size in pageSizeOptions)
                                {
                                    if (size == pageSize)
                                    {
                                        <option value="@size" selected>@size</option>
                                    }
                                    else
                                    {
                                        <option value="@size">@size</option>
                                    }
                                }
                            </select>
                            <span class="text-muted ms-2">entries per page</span>
                        </div>
                    </div>
                    
                    <nav aria-label="Equipment pagination">
                        <ul class="pagination pagination-sm mb-0">
                            @if (Model.HasPreviousPage)
                            {
                                <li class="page-item">
                                    <a class="page-link" asp-action="Index" asp-route-sortOrder="@ViewData["CurrentSort"]" asp-route-pageNumber="@(Model.PageIndex - 1)" asp-route-currentFilter="@ViewData["CurrentFilter"]" asp-route-categoryFilter="@ViewData["CategoryFilter"]" asp-route-statusFilter="@ViewData["StatusFilter"]" asp-route-departmentFilter="@ViewData["DepartmentFilter"]" asp-route-oathTagFilter="@ViewData["OathTagFilter"]" asp-route-assignedToFilter="@ViewData["AssignedToFilter"]" asp-route-locationFilter="@ViewData["LocationFilter"]" asp-route-netNameFilter="@ViewData["NetNameFilter"]" asp-route-modelFilter="@ViewData["ModelFilter"]" asp-route-serialNumberFilter="@ViewData["SerialNumberFilter"]" asp-route-deskNumberFilter="@ViewData["DeskNumberFilter"]" asp-route-manufacturerFilter="@ViewData["ManufacturerFilter"]" asp-route-purchaseDateFilter="@ViewData["PurchaseDateFilter"]">
                                        <i class="bi bi-chevron-left"></i>
                                    </a>
                                </li>
                            }
                            else
                            {
                                <li class="page-item disabled">
                                    <span class="page-link"><i class="bi bi-chevron-left"></i></span>
                                </li>
                            }

                            @{
                                var startPage = Math.Max(1, Model.PageIndex - 2);
                                var endPage = Math.Min(Model.TotalPages, Model.PageIndex + 2);
                            }

                            @if (startPage > 1)
                            {
                                <li class="page-item">
                                    <a class="page-link" asp-action="Index" asp-route-sortOrder="@ViewData["CurrentSort"]" asp-route-pageNumber="1" asp-route-currentFilter="@ViewData["CurrentFilter"]" asp-route-categoryFilter="@ViewData["CategoryFilter"]" asp-route-statusFilter="@ViewData["StatusFilter"]" asp-route-departmentFilter="@ViewData["DepartmentFilter"]" asp-route-oathTagFilter="@ViewData["OathTagFilter"]" asp-route-assignedToFilter="@ViewData["AssignedToFilter"]" asp-route-locationFilter="@ViewData["LocationFilter"]" asp-route-netNameFilter="@ViewData["NetNameFilter"]" asp-route-modelFilter="@ViewData["ModelFilter"]" asp-route-serialNumberFilter="@ViewData["SerialNumberFilter"]" asp-route-deskNumberFilter="@ViewData["DeskNumberFilter"]" asp-route-manufacturerFilter="@ViewData["ManufacturerFilter"]" asp-route-purchaseDateFilter="@ViewData["PurchaseDateFilter"]">1</a>
                                </li>
                                @if (startPage > 2)
                                {
                                    <li class="page-item disabled">
                                        <span class="page-link">...</span>
                                    </li>
                                }
                            }

                            @for (int i = startPage; i <= endPage; i++)
                            {
                                if (i == Model.PageIndex)
                                {
                                    <li class="page-item active">
                                        <span class="page-link">@i</span>
                                    </li>
                                }
                                else
                                {
                                    <li class="page-item">
                                        <a class="page-link" asp-action="Index" asp-route-sortOrder="@ViewData["CurrentSort"]" asp-route-pageNumber="@i" asp-route-currentFilter="@ViewData["CurrentFilter"]" asp-route-categoryFilter="@ViewData["CategoryFilter"]" asp-route-statusFilter="@ViewData["StatusFilter"]" asp-route-departmentFilter="@ViewData["DepartmentFilter"]" asp-route-oathTagFilter="@ViewData["OathTagFilter"]" asp-route-assignedToFilter="@ViewData["AssignedToFilter"]" asp-route-locationFilter="@ViewData["LocationFilter"]" asp-route-netNameFilter="@ViewData["NetNameFilter"]" asp-route-modelFilter="@ViewData["ModelFilter"]" asp-route-serialNumberFilter="@ViewData["SerialNumberFilter"]" asp-route-deskNumberFilter="@ViewData["DeskNumberFilter"]" asp-route-manufacturerFilter="@ViewData["ManufacturerFilter"]" asp-route-purchaseDateFilter="@ViewData["PurchaseDateFilter"]">@i</a>
                                    </li>
                                }
                            }

                            @if (endPage < Model.TotalPages)
                            {
                                @if (endPage < Model.TotalPages - 1)
                                {
                                    <li class="page-item disabled">
                                        <span class="page-link">...</span>
                                    </li>
                                }
                                <li class="page-item">
                                    <a class="page-link" asp-action="Index" asp-route-sortOrder="@ViewData["CurrentSort"]" asp-route-pageNumber="@Model.TotalPages" asp-route-currentFilter="@ViewData["CurrentFilter"]" asp-route-categoryFilter="@ViewData["CategoryFilter"]" asp-route-statusFilter="@ViewData["StatusFilter"]" asp-route-departmentFilter="@ViewData["DepartmentFilter"]" asp-route-oathTagFilter="@ViewData["OathTagFilter"]" asp-route-assignedToFilter="@ViewData["AssignedToFilter"]" asp-route-locationFilter="@ViewData["LocationFilter"]" asp-route-netNameFilter="@ViewData["NetNameFilter"]" asp-route-modelFilter="@ViewData["ModelFilter"]" asp-route-serialNumberFilter="@ViewData["SerialNumberFilter"]" asp-route-deskNumberFilter="@ViewData["DeskNumberFilter"]" asp-route-manufacturerFilter="@ViewData["ManufacturerFilter"]" asp-route-purchaseDateFilter="@ViewData["PurchaseDateFilter"]">@Model.TotalPages</a>
                                </li>
                            }

                            @if (Model.HasNextPage)
                            {
                                <li class="page-item">
                                    <a class="page-link" asp-action="Index" asp-route-sortOrder="@ViewData["CurrentSort"]" asp-route-pageNumber="@(Model.PageIndex + 1)" asp-route-currentFilter="@ViewData["CurrentFilter"]" asp-route-categoryFilter="@ViewData["CategoryFilter"]" asp-route-statusFilter="@ViewData["StatusFilter"]" asp-route-departmentFilter="@ViewData["DepartmentFilter"]" asp-route-oathTagFilter="@ViewData["OathTagFilter"]" asp-route-assignedToFilter="@ViewData["AssignedToFilter"]" asp-route-locationFilter="@ViewData["LocationFilter"]" asp-route-netNameFilter="@ViewData["NetNameFilter"]" asp-route-modelFilter="@ViewData["ModelFilter"]" asp-route-serialNumberFilter="@ViewData["SerialNumberFilter"]" asp-route-deskNumberFilter="@ViewData["DeskNumberFilter"]" asp-route-manufacturerFilter="@ViewData["ManufacturerFilter"]" asp-route-purchaseDateFilter="@ViewData["PurchaseDateFilter"]">
                                        <i class="bi bi-chevron-right"></i>
                                    </a>
                                </li>
                            }
                            else
                            {
                                <li class="page-item disabled">
                                    <span class="page-link"><i class="bi bi-chevron-right"></i></span>
                                </li>
                            }
                        </ul>
                    </nav>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let searchTimeout = null;
        let searchSuggestions = [];

        function filterDropdownItems(input, containerId) {
            const filter = input.value.toLowerCase();
            const container = document.getElementById(containerId);
            const items = container.querySelectorAll('.filter-item');
            
            items.forEach(item => {
                const text = item.textContent.toLowerCase();
                if (text.includes(filter)) {
                    item.style.display = 'block';
                } else {
                    item.style.display = 'none';
                }
            });
        }

        function changePageSize(size) {
            const url = new URL(window.location);
            url.searchParams.set('pageSize', size);
            url.searchParams.set('pageNumber', '1');
            window.location.href = url.toString();
        }

        // Master search functionality
        function initializeMasterSearch() {
            const searchInput = document.getElementById('searchInput');
            const suggestionsContainer = document.getElementById('searchSuggestions');
            
            if (!searchInput) return;

            // Show quick suggestions based on current page data
            function showSuggestions(query) {
                if (!query || query.length < 2) {
                    suggestionsContainer.style.display = 'none';
                    return;
                }

                // Show a "Search all equipment" option
                const suggestionsHtml = `
                    <div class="suggestion-item p-2 border-bottom" style="cursor: pointer;" 
                         onclick="performMasterSearch('${query}')">
                        <div class="d-flex align-items-center">
                            <div class="me-2">
                                <i class="bi bi-search text-primary"></i>
                            </div>
                            <div class="flex-grow-1">
                                <div class="fw-medium">Search for "${query}"</div>
                                <div class="small text-muted">
                                    Search all equipment across OATH Tag, Serial, Net Name, User, Model, Manufacturer, Department, Location...
                                </div>
                            </div>
                        </div>
                    </div>
                `;

                suggestionsContainer.innerHTML = suggestionsHtml;
                suggestionsContainer.style.display = 'block';
            }

            function performMasterSearch(query) {
                searchInput.value = query;
                suggestionsContainer.style.display = 'none';
                searchInput.form.submit();
            }



            // Handle input events
            searchInput.addEventListener('input', function(e) {
                const query = e.target.value.trim();
                
                // Clear previous timeout
                if (searchTimeout) {
                    clearTimeout(searchTimeout);
                }

                // Debounce the search
                searchTimeout = setTimeout(() => {
                    showSuggestions(query);
                }, 300);
            });

            // Handle keyboard navigation
            searchInput.addEventListener('keydown', function(e) {
                if (e.key === 'Enter') {
                    suggestionsContainer.style.display = 'none';
                    return; // Let the form submit normally
                }
                
                if (e.key === 'Escape') {
                    suggestionsContainer.style.display = 'none';
                    searchInput.blur();
                }
            });

            // Hide suggestions when clicking outside
            document.addEventListener('click', function(e) {
                if (!searchInput.contains(e.target) && !suggestionsContainer.contains(e.target)) {
                    suggestionsContainer.style.display = 'none';
                }
            });

            // Add keyboard shortcut for focusing search
            document.addEventListener('keydown', function(e) {
                // Ctrl+F or Cmd+F to focus search
                if ((e.ctrlKey || e.metaKey) && e.key === 'f') {
                    e.preventDefault();
                    searchInput.focus();
                    searchInput.select();
                }
            });
        }

        // Prevent dropdown from closing when clicking on search input
        document.addEventListener('DOMContentLoaded', function() {
            const dropdownInputs = document.querySelectorAll('.dropdown-menu input[type="text"]');
            dropdownInputs.forEach(input => {
                input.addEventListener('click', function(e) {
                    e.stopPropagation();
                });
            });

                    // Initialize master search
        initializeMasterSearch();
        
        // Initialize inline cell editing functionality
        initializeInlineEditing();
        
        // Initialize column management
        initializeColumnManagement();
        
        // Initialize filter counts
        initializeFilterCounts();
        
        // Initialize scroll navigation
        initializeScrollNavigation();
        
        // Debug: Show equipment IDs on current page
        const equipmentRows = Array.from(document.querySelectorAll('tr[data-equipment-id]'));
        const equipmentData = equipmentRows.map(row => ({
            id: row.getAttribute('data-equipment-id'),
            oathTag: row.getAttribute('data-oath-tag')
        }));
        console.log('Equipment data on current page:', equipmentData);
        console.log('Equipment IDs on current page:', equipmentData.map(e => e.id));
        console.log('OATH Tags on current page:', equipmentData.map(e => e.oathTag));
        if (equipmentData.length > 0) {
            console.log('First 5 equipment:', equipmentData.slice(0, 5));
        }
    });
    
    // Inline cell editing functionality
    function initializeInlineEditing() {
        const editableCells = document.querySelectorAll('.editable-cell');
        
        editableCells.forEach(cell => {
            cell.addEventListener('dblclick', function(e) {
                // Don't trigger if clicking on action buttons
                if (e.target.closest('.btn-group') || e.target.closest('.btn')) {
                    return;
                }
                
                startInlineEdit(this);
            });
            
            // Add hover effect
            cell.addEventListener('mouseenter', function() {
                this.style.backgroundColor = '#f0f8ff';
            });
            
            cell.addEventListener('mouseleave', function() {
                this.style.backgroundColor = '';
            });
        });
    }
    
    function startInlineEdit(cell) {
        const currentValue = cell.getAttribute('data-value') || cell.textContent.trim();
        const fieldName = cell.getAttribute('data-field');
        const equipmentId = cell.closest('tr').getAttribute('data-oath-tag');
        
        console.log('Starting inline edit:', {
            currentValue,
            fieldName,
            equipmentId,
            equipmentIdType: typeof equipmentId,
            cellData: {
                dataValue: cell.getAttribute('data-value'),
                dataField: cell.getAttribute('data-field')
            }
        });
        
        // Debug: Show all equipment IDs on current page
        const allEquipmentIds = Array.from(document.querySelectorAll('tr[data-equipment-id]'))
            .map(row => ({ id: row.getAttribute('data-equipment-id'), oathTag: row.getAttribute('data-oath-tag') }));
        console.log('Equipment IDs on current page:', allEquipmentIds);
        
        // Create input element
        const input = document.createElement('input');
        input.type = 'text';
        input.className = 'form-control form-control-sm';
        input.value = currentValue;
        input.style.width = '100%';
        input.style.minWidth = '120px';
        
        // Store original content
        const originalContent = cell.innerHTML;
        let isProcessing = false;
        
        // Replace cell content with input
        cell.innerHTML = '';
        cell.appendChild(input);
        input.focus();
        input.select();
        
        // Handle save on Enter or blur
        function saveEdit() {
            if (isProcessing) return; // Prevent multiple saves
            isProcessing = true;
            const newValue = input.value.trim();
            
            if (newValue !== currentValue) {
                // Show loading state
                cell.innerHTML = '<i class="bi bi-hourglass-split"></i> Saving...';
                
                // Send update request
                updateEquipmentField(equipmentId, fieldName, newValue)
                    .then(response => {
                        console.log('Processing response:', JSON.stringify(response, null, 2));
                        if (response.Success || response.success) {
                            // Update cell content and data attribute
                            cell.textContent = newValue || (fieldName === 'Assigned_User_Name' ? 'Unassigned' : 
                                                           fieldName === 'AssetCategoryId' ? 'Unknown' : 
                                                           fieldName === 'Department' ? 'Unknown' : 
                                                           fieldName === 'CurrentLocationId' ? 'Unknown' : 
                                                           fieldName === 'CurrentStatusId' ? 'Unknown' : 
                                                           fieldName === 'NetName' ? 'N/A' : 
                                                           fieldName === 'Model' ? 'Unknown' : 
                                                           fieldName === 'Serial_Number' ? 'N/A' : 'Unknown');
                            cell.setAttribute('data-value', newValue);
                            
                            // Show success indicator
                            cell.style.backgroundColor = '#d4edda';
                            setTimeout(() => {
                                cell.style.backgroundColor = '';
                            }, 1000);
                            
                            // Show success message
                            showToast('Field updated successfully!', 'success');
                        } else {
                            // Show error and restore original content
                            cell.innerHTML = originalContent;
                            cell.style.backgroundColor = '#f8d7da';
                            setTimeout(() => {
                                cell.style.backgroundColor = '';
                            }, 2000);
                            
                            // Show error message
                            showToast('Error updating field: ' + (response.Message || response.message), 'error');
                        }
                    })
                    .catch(error => {
                        // Show error and restore original content
                        cell.innerHTML = originalContent;
                        cell.style.backgroundColor = '#f8d7da';
                        setTimeout(() => {
                            cell.style.backgroundColor = '';
                        }, 2000);
                        
                        // Show error message
                        showToast('Error updating field: ' + error.message, 'error');
                    });
            } else {
                // No change, restore original content
                cell.innerHTML = originalContent;
            }
        }
        
        // Handle cancel on Escape
        function cancelEdit() {
            if (isProcessing) return; // Prevent conflicts
            isProcessing = true;
            cell.innerHTML = originalContent;
        }
        
        // Event listeners
        input.addEventListener('blur', function() {
            // Small delay to prevent DOM manipulation conflicts
            setTimeout(() => {
                if (!isProcessing) {
                    saveEdit();
                }
            }, 10);
        });
        
        input.addEventListener('keydown', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                saveEdit();
            } else if (e.key === 'Escape') {
                e.preventDefault();
                cancelEdit();
            }
        });
    }
    
    async function updateEquipmentField(equipmentId, fieldName, value) {
        try {
            console.log('Sending update request:', { equipmentId, fieldName, value });
            console.log('Equipment ID type:', typeof equipmentId, 'Value:', equipmentId);
            
            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
            if (!token) {
                console.error('Anti-forgery token not found');
                return { Success: false, Message: 'Security token not found' };
            }
            
            const response = await fetch('/Equipment/UpdateField', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({
                    id: equipmentId,
                    field: fieldName,
                    value: value
                })
            });
            
            console.log('Response status:', response.status);
            
            if (!response.ok) {
                const errorText = await response.text();
                console.error('HTTP error:', response.status, errorText);
                return { Success: false, Message: `HTTP ${response.status}: ${errorText}` };
            }
            
            const result = await response.json();
            console.log('Response data:', JSON.stringify(result, null, 2));
            return result;
        } catch (error) {
            console.error('Fetch error:', error);
            return { Success: false, Message: error.message };
        }
    }
    
    function showToast(message, type = 'info') {
        // Create toast element
        const toast = document.createElement('div');
        toast.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show position-fixed`;
        toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
        toast.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        
        document.body.appendChild(toast);
        
        // Auto-remove after 3 seconds
        setTimeout(() => {
            if (toast.parentNode) {
                toast.remove();
            }
        }, 3000);
    }
    
    // Column Management Functions
    function initializeColumnManagement() {
        loadColumnPreferences();
        initializeColumnOrder();
        initializeTooltips();
        syncModalCheckboxes();
        
        document.querySelectorAll('.column-toggle').forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                toggleColumn(this.dataset.column, this.checked);
                saveColumnPreferences();
                syncModalCheckboxes();
            });
        });
    }

    // Sync modal checkboxes with main checkboxes
    function syncModalCheckboxes() {
        document.querySelectorAll('.column-toggle').forEach(checkbox => {
            const columnName = checkbox.dataset.column;
            const modalCheckbox = document.querySelector(`#modal-col-${columnName}`);
            if (modalCheckbox) {
                modalCheckbox.checked = checkbox.checked;
            }
        });
    }

    // Save column settings from modal
    function saveColumnSettings() {
        document.querySelectorAll('#columnSettingsModal .column-toggle').forEach(checkbox => {
            const columnName = checkbox.dataset.column;
            toggleColumn(columnName, checkbox.checked);
        });
        
        // Always ensure Actions column is visible
        toggleColumn('actions', true);
        
        saveColumnPreferences();
        
        // Check if scroll navigation is needed after saving settings
        setTimeout(() => {
            if (window.checkScrollNeeded) {
                window.checkScrollNeeded();
            }
        }, 100);
        
        // Close modal
        const modal = bootstrap.Modal.getInstance(document.getElementById('columnSettingsModal'));
        if (modal) {
            modal.hide();
        }
    }

    // Initialize column reordering
    function initializeColumnOrder() {
        const table = document.querySelector('.table');
        if (!table) return;

        const thead = table.querySelector('thead tr');
        if (!thead) return;

        // Define column order
        const columns = [
            { id: 'oath-tag', name: 'OATH Tag' },
            { id: 'assigned-to', name: 'Assigned To' },
            { id: 'category', name: 'Category' },
            { id: 'unit', name: 'Unit' },
            { id: 'location', name: 'Location' },
            { id: 'floor', name: 'Floor' },
            { id: 'status', name: 'Status' },
            { id: 'net-name', name: 'Net Name' },
            { id: 'model', name: 'Model' },
            { id: 'serial-number', name: 'Serial Number' },
            { id: 'desk-number', name: 'Desk Number' },
            { id: 'manufacturer', name: 'Manufacturer' },
            { id: 'purchase-date', name: 'Purchase Date' },
            { id: 'asset-tag', name: 'Asset Tag' },
            { id: 'service-tag', name: 'Service Tag' },
            { id: 'ip-address', name: 'IP Address' },
            { id: 'os-version', name: 'OS Version' },
            { id: 'phone-number', name: 'Phone Number' },
            { id: 'purchase-price', name: 'Purchase Price' },
            { id: 'warranty-end', name: 'Warranty End' },
            { id: 'notes', name: 'Notes' },
            { id: 'mac-address', name: 'MAC Address' },
            { id: 'wall-port', name: 'Wall Port' },
            { id: 'switch-name', name: 'Switch Name' },
            { id: 'switch-port', name: 'Switch Port' },
            { id: 'extension', name: 'Extension' },
            { id: 'imei', name: 'IMEI' },
            { id: 'sim-card', name: 'SIM Card' },
            { id: 'config-notes', name: 'Config Notes' },
            { id: 'created-at', name: 'Created At' },
            { id: 'updated-at', name: 'Updated At' }
        ];

        // Load saved order or use default
        const savedOrder = localStorage.getItem('equipmentColumnOrder');
        let columnOrder = savedOrder ? JSON.parse(savedOrder) : columns.map(c => c.id);
        
        // Ensure all current columns are included in the order
        const currentColumnIds = columns.map(c => c.id);
        const missingColumns = currentColumnIds.filter(id => !columnOrder.includes(id));
        if (missingColumns.length > 0) {
            // Add missing columns to the end of the order
            columnOrder = [...columnOrder, ...missingColumns];
            // Save the updated order
            localStorage.setItem('equipmentColumnOrder', JSON.stringify(columnOrder));
        }

        // Apply the order to the table
        reorderTableColumns(columnOrder);

        // Make table headers draggable
        if (typeof Sortable !== 'undefined') {
            new Sortable(thead, {
                animation: 150,
                ghostClass: 'sortable-ghost',
                chosenClass: 'sortable-chosen',
                dragClass: 'sortable-drag',
                filter: '.actions-header', // Don't allow dragging the Actions column
                onEnd: function(evt) {
                    const headerCells = Array.from(thead.children);
                    const newOrder = [];
                    
                    headerCells.forEach(cell => {
                        // Find which column this header represents
                        for (const column of columns) {
                            if (cell.classList.contains(`column-${column.id}`)) {
                                newOrder.push(column.id);
                                break;
                            }
                        }
                    });
                    
                    // Add Actions column at the end
                    newOrder.push('actions');
                    
                    localStorage.setItem('equipmentColumnOrder', JSON.stringify(newOrder));
                    reorderTableColumns(newOrder);
                }
            });
        }
    }

    // Reorder table columns based on the new order
    function reorderTableColumns(columnOrder) {
        const table = document.querySelector('.table');
        if (!table) return;

        const thead = table.querySelector('thead tr');
        const tbody = table.querySelector('tbody');

        // Reorder header cells
        const headerCells = Array.from(thead.children);
        const newHeaderOrder = [];
        
        columnOrder.forEach(columnId => {
            const cell = headerCells.find(cell => cell.classList.contains(`column-${columnId}`));
            if (cell) newHeaderOrder.push(cell);
        });

        // Add Actions column at the end
        const actionsCell = headerCells.find(cell => cell.textContent.trim() === 'Actions');
        if (actionsCell) newHeaderOrder.push(actionsCell);

        // Clear and re-add header cells
        thead.innerHTML = '';
        newHeaderOrder.forEach(cell => thead.appendChild(cell));

        // Reorder data cells for each row
        const rows = tbody.querySelectorAll('tr');
        rows.forEach(row => {
            const cells = Array.from(row.children);
            const newCellOrder = [];
            
            columnOrder.forEach(columnId => {
                const cell = cells.find(cell => cell.classList.contains(`column-${columnId}`));
                if (cell) newCellOrder.push(cell);
            });

            // Add Actions cell at the end
            const actionsCell = cells.find(cell => cell.querySelector('.btn-group'));
            if (actionsCell) newCellOrder.push(actionsCell);

            // Clear and re-add cells
            row.innerHTML = '';
            newCellOrder.forEach(cell => row.appendChild(cell));
        });
    }

    // Initialize tooltips for truncated text
    function initializeTooltips() {
        // Initialize Bootstrap tooltips
        const tooltipTriggerList = [].slice.call(document.querySelectorAll('[title]'));
        tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl, {
                placement: 'top',
                trigger: 'hover'
            });
        });
    }

    // Multi-filter functions
    function applyMultiFilter(filterType) {
        const checkboxes = document.querySelectorAll(`[data-filter-type="${filterType}"]:checked`);
        const selectedValues = Array.from(checkboxes).map(cb => cb.value);
        
        // Update filter count
        updateFilterCount(filterType, selectedValues.length);
        
        // Build URL with current parameters
        const url = new URL(window.location);
        if (selectedValues.length > 0) {
            url.searchParams.set(`${filterType}Filter`, selectedValues.join(','));
        } else {
            url.searchParams.delete(`${filterType}Filter`);
        }
        
        // Navigate to new URL
        window.location.href = url.toString();
    }

    function clearMultiFilter(filterType) {
        const checkboxes = document.querySelectorAll(`[data-filter-type="${filterType}"]`);
        checkboxes.forEach(cb => cb.checked = false);
        
        // Update filter count
        updateFilterCount(filterType, 0);
        
        // Build URL without this filter
        const url = new URL(window.location);
        url.searchParams.delete(`${filterType}Filter`);
        
        // Navigate to new URL
        window.location.href = url.toString();
    }

    function selectAllMultiFilter(filterType) {
        const checkboxes = document.querySelectorAll(`[data-filter-type="${filterType}"]`);
        checkboxes.forEach(cb => cb.checked = true);
    }

    function updateFilterCount(filterType, count) {
        const countElement = document.getElementById(`${filterType}-filter-count`);
        if (countElement) {
            if (count > 0) {
                countElement.textContent = count;
                countElement.classList.add('show');
            } else {
                countElement.classList.remove('show');
            }
        }
    }

    // Initialize filter counts on page load
    function initializeFilterCounts() {
        const filterTypes = ['category', 'status', 'department', 'location', 'floor', 'netname', 'model', 'serialnumber', 'desknumber', 'manufacturer', 'purchasedate', 'assettag', 'servicetag', 'ipaddress', 'osversion', 'phonenumber', 'purchaseprice', 'warrantyend', 'notes', 'macaddress', 'wallport', 'switchname', 'switchport', 'extension', 'imei', 'simcard', 'confignotes'];
        filterTypes.forEach(filterType => {
            const checkboxes = document.querySelectorAll(`[data-filter-type="${filterType}"]:checked`);
            updateFilterCount(filterType, checkboxes.length);
        });
    }

    // Reset column order to default
    function resetColumnOrder() {
        localStorage.removeItem('equipmentColumnOrder');
        initializeColumnOrder();
    }
    
    function toggleColumn(columnName, show) {
        // Always ensure Actions column is visible
        if (columnName === 'actions') {
            const actionsElements = document.querySelectorAll('.column-actions');
            actionsElements.forEach(element => {
                element.style.display = '';
            });
            return;
        }
        
        const columnClass = `column-${columnName}`;
        const elements = document.querySelectorAll(`.${columnClass}`);
        
        elements.forEach(element => {
            if (show) {
                element.style.display = '';
            } else {
                element.style.display = 'none';
            }
        });
        
        // Check if scroll navigation is needed after column changes
        setTimeout(() => {
            if (window.checkScrollNeeded) {
                window.checkScrollNeeded();
            }
        }, 100);
    }
    
    function showAllColumns() {
        document.querySelectorAll('.column-toggle').forEach(checkbox => {
            checkbox.checked = true;
            toggleColumn(checkbox.dataset.column, true);
        });
        // Ensure Actions column is always visible
        toggleColumn('actions', true);
        saveColumnPreferences();
        
        // Check if scroll navigation is needed after showing all columns
        setTimeout(() => {
            if (window.checkScrollNeeded) {
                window.checkScrollNeeded();
            }
        }, 100);
    }
    
    function saveColumnPreferences() {
        const preferences = {};
        document.querySelectorAll('.column-toggle').forEach(checkbox => {
            preferences[checkbox.dataset.column] = checkbox.checked;
        });
        localStorage.setItem('equipment-column-preferences', JSON.stringify(preferences));
    }
    
    function loadColumnPreferences() {
        const saved = localStorage.getItem('equipment-column-preferences');
        if (saved) {
            const preferences = JSON.parse(saved);
            document.querySelectorAll('.column-toggle').forEach(checkbox => {
                const columnName = checkbox.dataset.column;
                if (preferences.hasOwnProperty(columnName)) {
                    checkbox.checked = preferences[columnName];
                    toggleColumn(columnName, preferences[columnName]);
                } else {
                    // For new columns that don't have saved preferences, default to visible
                    checkbox.checked = true;
                    toggleColumn(columnName, true);
                }
            });
        } else {
            // If no saved preferences, show all columns by default
            document.querySelectorAll('.column-toggle').forEach(checkbox => {
                checkbox.checked = true;
                toggleColumn(checkbox.dataset.column, true);
            });
        }
        // Always ensure Actions column is visible
        toggleColumn('actions', true);
    }

    // Export to Excel function
    function exportToExcel() {
        // Get current URL parameters
        const urlParams = new URLSearchParams(window.location.search);
        
        // Build export URL with all current filters and sorting
        let exportUrl = '/Equipment/Export?';
        
        // Add all the filter parameters
        const filterParams = [
            'searchString', 'sortOrder', 'categoryFilter', 'statusFilter', 'departmentFilter',
            'oathTagFilter', 'assignedToFilter', 'locationFilter', 'floorFilter', 'netNameFilter',
            'modelFilter', 'serialNumberFilter', 'deskNumberFilter', 'manufacturerFilter',
            'purchaseDateFilter', 'assetTagFilter', 'serviceTagFilter', 'ipAddressFilter',
            'osVersionFilter', 'phoneNumberFilter', 'purchasePriceFilter', 'warrantyEndFilter',
            'notesFilter', 'macAddressFilter', 'wallPortFilter', 'switchNameFilter',
            'switchPortFilter', 'extensionFilter', 'imeiFilter', 'simCardFilter', 'configNotesFilter'
        ];
        
        filterParams.forEach(param => {
            const value = urlParams.get(param);
            if (value) {
                exportUrl += `${param}=${encodeURIComponent(value)}&`;
            }
        });
        
        // Add visible columns parameter
        const visibleColumns = getVisibleColumns();
        if (visibleColumns.length > 0) {
            exportUrl += `visibleColumns=${encodeURIComponent(visibleColumns.join(','))}&`;
        }
        
        // Remove trailing & and navigate to export URL
        exportUrl = exportUrl.replace(/&$/, '');
        window.location.href = exportUrl;
    }

    // Get currently visible columns
    function getVisibleColumns() {
        const visibleColumns = [];
        document.querySelectorAll('.column-toggle:checked').forEach(checkbox => {
            visibleColumns.push(checkbox.dataset.column);
        });
        // Always include Actions column
        visibleColumns.push('actions');
        return visibleColumns;
    }

    // Role-based presets
    const rolePresets = {
        'staff-manager': {
            name: 'Staff Manager',
            description: 'Basic equipment info, location, assigned users',
            columns: {
                'oath-tag': true,
                'assigned-to': true,
                'category': true,
                'unit': true,
                'location': true,
                'floor': true,
                'status': true,
                'model': true,
                'desk-number': true,
                'manufacturer': true,
                'purchase-date': false,
                'asset-tag': false,
                'service-tag': false,
                'ip-address': false,
                'os-version': false,
                'phone-number': true,
                'purchase-price': false,
                'warranty-end': false,
                'notes': true,
                'net-name': false,
                'serial-number': false,
                'mac-address': false,
                'wall-port': false,
                'switch-name': false,
                'switch-port': false,
                'extension': true,
                'imei': false,
                'sim-card': false,
                'config-notes': false,
                'created-at': false,
                'updated-at': false
            }
        },
        'procurement': {
            name: 'Procurement',
            description: 'Financial info, purchase dates, warranties',
            columns: {
                'oath-tag': true,
                'assigned-to': true,
                'category': true,
                'unit': true,
                'location': true,
                'floor': false,
                'status': true,
                'model': true,
                'desk-number': false,
                'manufacturer': true,
                'purchase-date': true,
                'asset-tag': true,
                'service-tag': true,
                'ip-address': false,
                'os-version': false,
                'phone-number': false,
                'purchase-price': true,
                'warranty-end': true,
                'notes': true,
                'net-name': false,
                'serial-number': true,
                'mac-address': false,
                'wall-port': false,
                'switch-name': false,
                'switch-port': false,
                'extension': false,
                'imei': false,
                'sim-card': false,
                'config-notes': false,
                'created-at': true,
                'updated-at': true
            }
        },
        'it-support': {
            name: 'IT Support',
            description: 'Technical details, network info, configurations',
            columns: {
                'oath-tag': true,
                'assigned-to': true,
                'category': true,
                'unit': true,
                'location': true,
                'floor': true,
                'status': true,
                'model': true,
                'desk-number': true,
                'manufacturer': true,
                'purchase-date': false,
                'asset-tag': true,
                'service-tag': true,
                'ip-address': true,
                'os-version': true,
                'phone-number': true,
                'purchase-price': false,
                'warranty-end': false,
                'notes': true,
                'net-name': true,
                'serial-number': true,
                'mac-address': true,
                'wall-port': true,
                'switch-name': true,
                'switch-port': true,
                'extension': true,
                'imei': true,
                'sim-card': true,
                'config-notes': true,
                'created-at': false,
                'updated-at': false
            }
        },
        'asset-manager': {
            name: 'Asset Manager',
            description: 'Complete view with all details',
            columns: {
                'oath-tag': true,
                'assigned-to': true,
                'category': true,
                'unit': true,
                'location': true,
                'floor': true,
                'status': true,
                'model': true,
                'desk-number': true,
                'manufacturer': true,
                'purchase-date': true,
                'asset-tag': true,
                'service-tag': true,
                'ip-address': true,
                'os-version': true,
                'phone-number': true,
                'purchase-price': true,
                'warranty-end': true,
                'notes': true,
                'net-name': true,
                'serial-number': true,
                'mac-address': true,
                'wall-port': true,
                'switch-name': true,
                'switch-port': true,
                'extension': true,
                'imei': true,
                'sim-card': true,
                'config-notes': true,
                'created-at': true,
                'updated-at': true
            }
        }
    };

    function applyPreset(presetName) {
        const preset = rolePresets[presetName];
        if (!preset) {
            alert('Preset not found');
            return;
        }

        // Apply the preset to all checkboxes
        document.querySelectorAll('.column-toggle').forEach(checkbox => {
            const columnName = checkbox.dataset.column;
            if (preset.columns.hasOwnProperty(columnName)) {
                checkbox.checked = preset.columns[columnName];
                toggleColumn(columnName, preset.columns[columnName]);
            }
        });

        // Always ensure Actions column is visible
        toggleColumn('actions', true);

        // Save preferences
        saveColumnPreferences();
        
        // Check if scroll navigation is needed after applying preset
        setTimeout(() => {
            if (window.checkScrollNeeded) {
                window.checkScrollNeeded();
            }
        }, 100);

        // Show confirmation
        const toast = document.createElement('div');
        toast.className = 'toast align-items-center text-white bg-success border-0';
        toast.setAttribute('role', 'alert');
        toast.innerHTML = `
            <div class="d-flex">
                <div class="toast-body">
                    <i class="bi bi-check-circle"></i> Applied ${preset.name} preset: ${preset.description}
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
            </div>
        `;
        
        const toastContainer = document.getElementById('toastContainer') || createToastContainer();
        toastContainer.appendChild(toast);
        
        const bsToast = new bootstrap.Toast(toast);
        bsToast.show();
    }

    function saveCustomPreset() {
        const presetName = prompt('Enter a name for your custom preset:');
        if (!presetName) return;

        const customPreset = {
            name: presetName,
            description: 'Custom preset',
            columns: {}
        };

        // Get current column selections
        document.querySelectorAll('.column-toggle').forEach(checkbox => {
            customPreset.columns[checkbox.dataset.column] = checkbox.checked;
        });

        // Save to localStorage
        const savedPresets = JSON.parse(localStorage.getItem('custom-presets') || '{}');
        savedPresets[presetName] = customPreset;
        localStorage.setItem('custom-presets', JSON.stringify(savedPresets));

        // Show confirmation
        const toast = document.createElement('div');
        toast.className = 'toast align-items-center text-white bg-info border-0';
        toast.setAttribute('role', 'alert');
        toast.innerHTML = `
            <div class="d-flex">
                <div class="toast-body">
                    <i class="bi bi-bookmark"></i> Custom preset "${presetName}" saved successfully!
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
            </div>
        `;
        
        const toastContainer = document.getElementById('toastContainer') || createToastContainer();
        toastContainer.appendChild(toast);
        
        const bsToast = new bootstrap.Toast(toast);
        bsToast.show();
    }

    function createToastContainer() {
        const container = document.createElement('div');
        container.id = 'toastContainer';
        container.className = 'toast-container position-fixed top-0 end-0 p-3';
        container.style.zIndex = '9999';
        document.body.appendChild(container);
        return container;
    }
    
    // Horizontal Scroll Navigation Functions
    function initializeScrollNavigation() {
        const tableContainer = document.querySelector('.table-responsive');
        const scrollNavigation = document.getElementById('scrollNavigation');
        const scrollProgress = document.getElementById('scrollProgress');
        const leftBtn = document.querySelector('.scroll-left');
        const rightBtn = document.querySelector('.scroll-right');
        
        if (!tableContainer || !scrollNavigation) return;
        
        // Check if table needs horizontal scrolling
        function checkScrollNeeded() {
            const isScrollable = tableContainer.scrollWidth > tableContainer.clientWidth;
            const visibleColumns = document.querySelectorAll('.column-toggle:checked').length;
            
            // Show navigation when there are more than 10 columns OR when table is scrollable
            const shouldShowNavigation = visibleColumns > 10 || isScrollable;
            scrollNavigation.style.display = shouldShowNavigation ? 'flex' : 'none';
            
            if (shouldShowNavigation) {
                updateScrollProgress();
                updateScrollButtons();
            }
        }
        
        // Update scroll progress indicator
        function updateScrollProgress() {
            const scrollLeft = tableContainer.scrollLeft;
            const maxScroll = tableContainer.scrollWidth - tableContainer.clientWidth;
            const progress = maxScroll > 0 ? (scrollLeft / maxScroll) * 100 : 0;
            scrollProgress.style.width = progress + '%';
        }
        
        // Update scroll button states
        function updateScrollButtons() {
            const scrollLeft = tableContainer.scrollLeft;
            const maxScroll = tableContainer.scrollWidth - tableContainer.clientWidth;
            
            leftBtn.disabled = scrollLeft <= 0;
            rightBtn.disabled = scrollLeft >= maxScroll;
        }
        
        // Scroll table horizontally
        function scrollTable(direction) {
            const scrollAmount = 300; // Scroll by 300px
            const currentScroll = tableContainer.scrollLeft;
            
            if (direction === 'left') {
                tableContainer.scrollLeft = Math.max(0, currentScroll - scrollAmount);
            } else {
                tableContainer.scrollLeft = Math.min(
                    tableContainer.scrollWidth - tableContainer.clientWidth,
                    currentScroll + scrollAmount
                );
            }
        }
        
        // Add event listeners
        tableContainer.addEventListener('scroll', () => {
            updateScrollProgress();
            updateScrollButtons();
        });
        
        // Check on window resize
        window.addEventListener('resize', checkScrollNeeded);
        
        // Initial check
        checkScrollNeeded();
        
        // Make functions globally available
        window.scrollTable = scrollTable;
        window.checkScrollNeeded = checkScrollNeeded;
    }
</script>

<!-- Column Settings Modal -->
<div class="modal fade" id="columnSettingsModal" tabindex="-1" aria-labelledby="columnSettingsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="columnSettingsModalLabel">
                    <i class="bi bi-gear"></i> Column Settings
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-8">
                        <h6>Show/Hide Columns</h6>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-oath-tag" data-column="oath-tag" checked>
                                    <label class="form-check-label" for="modal-col-oath-tag">OATH Tag</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-assigned-to" data-column="assigned-to" checked>
                                    <label class="form-check-label" for="modal-col-assigned-to">Assigned To</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-category" data-column="category" checked>
                                    <label class="form-check-label" for="modal-col-category">Category</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-unit" data-column="unit" checked>
                                    <label class="form-check-label" for="modal-col-unit">Unit</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-location" data-column="location" checked>
                                    <label class="form-check-label" for="modal-col-location">Location</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-floor" data-column="floor" checked>
                                    <label class="form-check-label" for="modal-col-floor">Floor</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-status" data-column="status" checked>
                                    <label class="form-check-label" for="modal-col-status">Status</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-net-name" data-column="net-name" checked>
                                    <label class="form-check-label" for="modal-col-net-name">Net Name</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-model" data-column="model" checked>
                                    <label class="form-check-label" for="modal-col-model">Model</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-serial-number" data-column="serial-number" checked>
                                    <label class="form-check-label" for="modal-col-serial-number">Serial Number</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-desk-number" data-column="desk-number" checked>
                                    <label class="form-check-label" for="modal-col-desk-number">Desk Number</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-manufacturer" data-column="manufacturer" checked>
                                    <label class="form-check-label" for="modal-col-manufacturer">Manufacturer</label>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-purchase-date" data-column="purchase-date" checked>
                                    <label class="form-check-label" for="modal-col-purchase-date">Purchase Date</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-asset-tag" data-column="asset-tag" checked>
                                    <label class="form-check-label" for="modal-col-asset-tag">Asset Tag</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-service-tag" data-column="service-tag" checked>
                                    <label class="form-check-label" for="modal-col-service-tag">Service Tag</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-ip-address" data-column="ip-address" checked>
                                    <label class="form-check-label" for="modal-col-ip-address">IP Address</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-os-version" data-column="os-version" checked>
                                    <label class="form-check-label" for="modal-col-os-version">OS Version</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-phone-number" data-column="phone-number" checked>
                                    <label class="form-check-label" for="modal-col-phone-number">Phone Number</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-purchase-price" data-column="purchase-price" checked>
                                    <label class="form-check-label" for="modal-col-purchase-price">Purchase Price</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-warranty-end" data-column="warranty-end" checked>
                                    <label class="form-check-label" for="modal-col-warranty-end">Warranty End</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-notes" data-column="notes" checked>
                                    <label class="form-check-label" for="modal-col-notes">Notes</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-mac-address" data-column="mac-address" checked>
                                    <label class="form-check-label" for="modal-col-mac-address">MAC Address</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-wall-port" data-column="wall-port" checked>
                                    <label class="form-check-label" for="modal-col-wall-port">Wall Port</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-switch-name" data-column="switch-name" checked>
                                    <label class="form-check-label" for="modal-col-switch-name">Switch Name</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-switch-port" data-column="switch-port" checked>
                                    <label class="form-check-label" for="modal-col-switch-port">Switch Port</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-extension" data-column="extension" checked>
                                    <label class="form-check-label" for="modal-col-extension">Extension</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-imei" data-column="imei" checked>
                                    <label class="form-check-label" for="modal-col-imei">IMEI</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-sim-card" data-column="sim-card" checked>
                                    <label class="form-check-label" for="modal-col-sim-card">SIM Card</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-config-notes" data-column="config-notes" checked>
                                    <label class="form-check-label" for="modal-col-config-notes">Config Notes</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-created-at" data-column="created-at" checked>
                                    <label class="form-check-label" for="modal-col-created-at">Created At</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-updated-at" data-column="updated-at" checked>
                                    <label class="form-check-label" for="modal-col-updated-at">Updated At</label>
                                </div>
                            </div>
                        </div>
                        <div class="mt-3">
                            <h6>Role-Based Presets</h6>
                            <div class="btn-group btn-group-sm mb-2" role="group">
                                <button class="btn btn-outline-info" onclick="applyPreset('staff-manager')" title="Staff Managers: Basic equipment info, location, assigned users">
                                    <i class="bi bi-people"></i> Staff Manager
                                </button>
                                <button class="btn btn-outline-warning" onclick="applyPreset('procurement')" title="Procurement: Financial info, purchase dates, warranties">
                                    <i class="bi bi-cart"></i> Procurement
                                </button>
                                <button class="btn btn-outline-danger" onclick="applyPreset('it-support')" title="IT Support: Technical details, network info, configurations">
                                    <i class="bi bi-tools"></i> IT Support
                                </button>
                                <button class="btn btn-outline-success" onclick="applyPreset('asset-manager')" title="Asset Manager: Complete view with all details">
                                    <i class="bi bi-building"></i> Asset Manager
                                </button>
                            </div>
                            <div class="mt-2">
                                <button class="btn btn-sm btn-outline-primary" onclick="showAllColumns()">Show All</button>
                                <button class="btn btn-sm btn-outline-secondary ms-2" onclick="resetColumnOrder()">Reset Column Order</button>
                                <button class="btn btn-sm btn-outline-dark ms-2" onclick="saveCustomPreset()" title="Save current column selection as custom preset">
                                    <i class="bi bi-bookmark"></i> Save Custom Preset
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <h6>Column Management</h6>
                        <p class="text-muted small">Drag table headers to reorder columns</p>
                        <div class="alert alert-info">
                            <i class="bi bi-info-circle"></i>
                            <strong>Tip:</strong> You can also drag column headers directly in the table to reorder them.
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="saveColumnSettings()">Save Settings</button>
            </div>
        </div>
    </div>
</div>
}

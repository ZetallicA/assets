@model AssetManagement.Controllers.PaginatedList<AssetManagement.Models.Equipment>
@{
    ViewData["Title"] = "Equipment";
}

<style>
    /* Column reordering styles */
    .table thead th {
        cursor: move;
        transition: background-color 0.2s, transform 0.1s;
        user-select: none;
    }
    
    .table thead th:hover {
        background: #e9ecef;
        transform: translateY(-1px);
    }
    
    .table thead th.actions-header {
        cursor: default;
    }
    
    .table thead th.actions-header:hover {
        background: #f8f9fa;
        transform: none;
    }
    
    .sortable-ghost {
        opacity: 0.5;
        background: #dee2e6 !important;
        transform: rotate(5deg);
    }
    
    .sortable-chosen {
        background: #fff3cd !important;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        transform: scale(1.02);
    }
    
    .sortable-drag {
        background: #fff3cd !important;
        box-shadow: 0 8px 16px rgba(0,0,0,0.2);
        transform: rotate(5deg) scale(1.05);
    }
    
    /* Text truncation and tooltip styles */
    .table td {
        max-width: 200px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }
    
    .table td:hover {
        white-space: normal;
        word-wrap: break-word;
        max-width: none;
        position: relative;
        z-index: 10;
        background: #fff;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        border-radius: 4px;
        padding: 8px;
    }
    
    /* Column toggle styles */
    .column-toggle:checked + label {
        font-weight: 600;
        color: #0d6efd;
    }
    
    /* Responsive table */
    .table-responsive {
        overflow-x: auto;
    }
    
    /* Sticky header */
    .table thead th {
        position: sticky;
        top: 0;
        background: #f8f9fa;
        z-index: 1;
    }
</style>

<style>
    .filter-button {
        padding: 2px 6px;
        font-size: 0.75rem;
        border-radius: 4px;
    }
    
    .filter-button.active {
        background-color: #007bff;
        color: white;
        border-color: #007bff;
    }
    
    .filter-button:hover {
        background-color: #e9ecef;
    }
    
    .filter-button.active:hover {
        background-color: #0056b3;
    }
    
    .dropdown-menu {
        min-width: 200px;
    }
    
    .dropdown-item.active {
        background-color: #007bff;
        color: white;
    }
    
    .table th {
        position: relative;
    }
    
    .dropdown-menu input[type="text"] {
        border: 1px solid #dee2e6;
        border-radius: 4px;
        font-size: 0.875rem;
    }
    
    .dropdown-menu input[type="text"]:focus {
        border-color: #007bff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }
    
    .filter-item {
        transition: all 0.2s ease;
    }
    
    .filter-item:hover {
        background-color: #f8f9fa;
    }
    
    /* Master search suggestions styling */
    #searchSuggestions {
        background: white;
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        max-height: 300px;
        overflow-y: auto;
        z-index: 1050;
    }
    
    .suggestion-item {
        transition: background-color 0.15s ease-in-out;
    }
    
    .suggestion-item:hover {
        background-color: #f8f9fa;
    }
    
    .suggestion-item:last-child {
        border-bottom: none !important;
    }
    
    /* Search input focus styling */
    #searchInput:focus {
        border-color: #007bff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }
    
    /* Master search icon in placeholder */
    #searchInput::placeholder {
        color: #6c757d;
        opacity: 1;
    }
</style>

<div class="container-fluid">
    @Html.AntiForgeryToken()
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-0">Equipment</h1>
            <p class="text-muted mb-0">Manage IT equipment inventory</p>
        </div>
        <div class="d-flex gap-2">
            <a asp-action="Create" class="btn btn-primary">
                <i class="bi bi-plus-circle"></i> Add Equipment
            </a>
        </div>
    </div>

    <!-- Search and Filter Form -->
    <div class="card mb-4">
        <div class="card-body">
            <form asp-action="Index" method="get" class="row g-3">
                <!-- Search Input -->
                <div class="col-md-6">
                    <div class="input-group">
                        <input type="text" class="form-control" id="searchInput" name="SearchString" value="@ViewData["CurrentFilter"]" placeholder="🔍 Master search: OATH Tag, Serial, Net Name, User, Model, Manufacturer, Department, Location..." autocomplete="off">
                        <div id="searchSuggestions" class="position-absolute bg-white border rounded shadow-sm" style="top: 100%; left: 0; right: 0; z-index: 1000; display: none; max-height: 200px; overflow-y: auto;"></div>
                        <button class="btn btn-outline-secondary" type="submit">
                            <i class="bi bi-search"></i>
                        </button>
                        @if (!string.IsNullOrEmpty(ViewData["CurrentFilter"]?.ToString()))
                        {
                            <a asp-action="Index" class="btn btn-outline-secondary">
                                <i class="bi bi-x-circle"></i> Clear
                            </a>
                        }
                    </div>
                </div>
                
                <!-- Filter Dropdowns -->
                <div class="col-md-6">
                    <div class="row g-2">
                        <div class="col-md-4">
                            <select name="categoryFilter" class="form-select form-select-sm" onchange="this.form.submit()">
                                <option value="">All Categories</option>
                                @foreach (var category in ViewData["CategoryOptions"] as List<string> ?? new List<string>())
                                {
                                    if (category == ViewData["CategoryFilter"]?.ToString())
                                    {
                                        <option value="@category" selected>@category</option>
                                    }
                                    else
                                    {
                                        <option value="@category">@category</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="col-md-4">
                            <select name="statusFilter" class="form-select form-select-sm" onchange="this.form.submit()">
                                <option value="">All Statuses</option>
                                @foreach (var status in ViewData["StatusOptions"] as List<string> ?? new List<string>())
                                {
                                    if (status == ViewData["StatusFilter"]?.ToString())
                                    {
                                        <option value="@status" selected>@status</option>
                                    }
                                    else
                                    {
                                        <option value="@status">@status</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="col-md-3">
                            <select name="departmentFilter" class="form-select form-select-sm" onchange="this.form.submit()">
                                <option value="">All Units</option>
                                @foreach (var dept in ViewData["DepartmentOptions"] as List<string> ?? new List<string>())
                                {
                                    if (dept == ViewData["DepartmentFilter"]?.ToString())
                                    {
                                        <option value="@dept" selected>@dept</option>
                                    }
                                    else
                                    {
                                        <option value="@dept">@dept</option>
                                    }
                                }
                            </select>
                        </div>

                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Equipment List -->
    <div class="card">
        <div class="card-body">
            @if (!Model.Any())
            {
                <div class="text-center py-5">
                    <i class="bi bi-laptop display-1 text-muted"></i>
                    <h4 class="text-muted mt-3">No Equipment Found</h4>
                    <p class="text-muted">@(string.IsNullOrEmpty(ViewData["CurrentFilter"]?.ToString()) ? "Add your first piece of equipment to get started." : "No equipment matches your search criteria.")</p>
                    @if (string.IsNullOrEmpty(ViewData["CurrentFilter"]?.ToString()))
                    {
                        <a asp-action="Create" class="btn btn-primary">
                            <i class="bi bi-plus-circle"></i> Add Equipment
                        </a>
                    }
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead class="table-light">
                            <tr>
                                <th class="column-oath-tag">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["OATHTagSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" asp-route-categoryFilter="@ViewData["CategoryFilter"]" asp-route-statusFilter="@ViewData["StatusFilter"]" asp-route-departmentFilter="@ViewData["DepartmentFilter"]" class="text-decoration-none me-2">
                                            OATH Tag
                                            @if (ViewData["CurrentSort"]?.ToString() == "oath_tag_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["OathTagFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 300px; overflow-y: auto; min-width: 250px;">
                                                <li><h6 class="dropdown-header">Filter by OATH Tag</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search OATH tags..." 
                                                               onkeyup="filterDropdownItems(this, 'oath-tag-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="oath-tag-filter-items">
                                                        @foreach (var tag in ViewData["OathTagOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <a class="dropdown-item @(tag == ViewData["OathTagFilter"]?.ToString() ? "active" : "")" 
                                                                   href="@Url.Action("Index", new { 
                                                                       sortOrder = ViewData["CurrentSort"], 
                                                                       currentFilter = ViewData["CurrentFilter"], 
                                                                       categoryFilter = ViewData["CategoryFilter"], 
                                                                       statusFilter = ViewData["StatusFilter"], 
                                                                       departmentFilter = ViewData["DepartmentFilter"], 
                                                                       oathTagFilter = tag 
                                                                   })">
                                                                    @tag
                                                                </a>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-assigned-to">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["AssignedToSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" asp-route-categoryFilter="@ViewData["CategoryFilter"]" asp-route-statusFilter="@ViewData["StatusFilter"]" asp-route-departmentFilter="@ViewData["DepartmentFilter"]" class="text-decoration-none me-2">
                                            Assigned To
                                            @if (ViewData["CurrentSort"]?.ToString() == "assigned_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "assigned")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["AssignedToFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 300px; overflow-y: auto; min-width: 250px;">
                                                <li><h6 class="dropdown-header">Filter by Assigned To</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search users..." 
                                                               onkeyup="filterDropdownItems(this, 'assigned-to-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="assigned-to-filter-items">
                                                        @foreach (var user in ViewData["AssignedToOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <a class="dropdown-item @(user == ViewData["AssignedToFilter"]?.ToString() ? "active" : "")" 
                                                                   href="@Url.Action("Index", new { 
                                                                       sortOrder = ViewData["CurrentSort"], 
                                                                       currentFilter = ViewData["CurrentFilter"], 
                                                                       categoryFilter = ViewData["CategoryFilter"], 
                                                                       statusFilter = ViewData["StatusFilter"], 
                                                                       departmentFilter = ViewData["DepartmentFilter"], 
                                                                       assignedToFilter = user 
                                                                   })">
                                                                    @user
                                                                </a>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-category">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["CategorySortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" asp-route-categoryFilter="@ViewData["CategoryFilter"]" asp-route-statusFilter="@ViewData["StatusFilter"]" asp-route-departmentFilter="@ViewData["DepartmentFilter"]" class="text-decoration-none me-2">
                                            Category
                                            @if (ViewData["CurrentSort"]?.ToString() == "category_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "category")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["CategoryFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 300px; overflow-y: auto; min-width: 250px;">
                                                <li><h6 class="dropdown-header">Filter by Category</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search categories..." 
                                                               onkeyup="filterDropdownItems(this, 'category-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="category-filter-items">
                                                        @foreach (var category in ViewData["CategoryOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <a class="dropdown-item @(category == ViewData["CategoryFilter"]?.ToString() ? "active" : "")" 
                                                                   href="@Url.Action("Index", new { 
                                                                       sortOrder = ViewData["CurrentSort"], 
                                                                       currentFilter = ViewData["CurrentFilter"], 
                                                                       categoryFilter = category, 
                                                                       statusFilter = ViewData["StatusFilter"], 
                                                                       departmentFilter = ViewData["DepartmentFilter"] 
                                                                   })">
                                                                    @category
                                                                </a>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-unit">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["DepartmentSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" asp-route-categoryFilter="@ViewData["CategoryFilter"]" asp-route-statusFilter="@ViewData["StatusFilter"]" asp-route-departmentFilter="@ViewData["DepartmentFilter"]" class="text-decoration-none me-2">
                                            Unit
                                            @if (ViewData["CurrentSort"]?.ToString() == "department_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "department")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["DepartmentFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 300px; overflow-y: auto; min-width: 250px;">
                                                <li><h6 class="dropdown-header">Filter by Unit</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search units..." 
                                                               onkeyup="filterDropdownItems(this, 'unit-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="unit-filter-items">
                                                        @foreach (var dept in ViewData["DepartmentOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <a class="dropdown-item @(dept == ViewData["DepartmentFilter"]?.ToString() ? "active" : "")" 
                                                                   href="@Url.Action("Index", new { 
                                                                       sortOrder = ViewData["CurrentSort"], 
                                                                       currentFilter = ViewData["CurrentFilter"], 
                                                                       categoryFilter = ViewData["CategoryFilter"], 
                                                                       statusFilter = ViewData["StatusFilter"], 
                                                                       departmentFilter = dept 
                                                                   })">
                                                                    @dept
                                                                </a>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-location">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["LocationSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" asp-route-categoryFilter="@ViewData["CategoryFilter"]" asp-route-statusFilter="@ViewData["StatusFilter"]" asp-route-departmentFilter="@ViewData["DepartmentFilter"]" class="text-decoration-none me-2">
                                            Location
                                            @if (ViewData["CurrentSort"]?.ToString() == "location_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "location")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["LocationFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 300px; overflow-y: auto; min-width: 250px;">
                                                <li><h6 class="dropdown-header">Filter by Location</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search locations..." 
                                                               onkeyup="filterDropdownItems(this, 'location-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="location-filter-items">
                                                        @foreach (var location in ViewData["LocationOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <a class="dropdown-item @(location == ViewData["LocationFilter"]?.ToString() ? "active" : "")" 
                                                                   href="@Url.Action("Index", new { 
                                                                       sortOrder = ViewData["CurrentSort"], 
                                                                       currentFilter = ViewData["CurrentFilter"], 
                                                                       categoryFilter = ViewData["CategoryFilter"], 
                                                                       statusFilter = ViewData["StatusFilter"], 
                                                                       departmentFilter = ViewData["DepartmentFilter"], 
                                                                       locationFilter = location,
                                                                       floorFilter = ViewData["FloorFilter"]
                                                                   })">
                                                                    @location
                                                                </a>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-floor">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["FloorSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" asp-route-categoryFilter="@ViewData["CategoryFilter"]" asp-route-statusFilter="@ViewData["StatusFilter"]" asp-route-departmentFilter="@ViewData["DepartmentFilter"]" asp-route-locationFilter="@ViewData["LocationFilter"]" class="text-decoration-none me-2">
                                            Floor
                                            @if (ViewData["CurrentSort"]?.ToString() == "floor_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "floor")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["FloorFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 300px; overflow-y: auto; min-width: 250px;">
                                                <li><h6 class="dropdown-header">Filter by Floor</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search floors..." 
                                                               onkeyup="filterDropdownItems(this, 'floor-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="floor-filter-items">
                                                        @foreach (var floor in ViewData["FloorOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <a class="dropdown-item @(floor == ViewData["FloorFilter"]?.ToString() ? "active" : "")" 
                                                                   href="@Url.Action("Index", new { 
                                                                       sortOrder = ViewData["CurrentSort"], 
                                                                       currentFilter = ViewData["CurrentFilter"], 
                                                                       categoryFilter = ViewData["CategoryFilter"], 
                                                                       statusFilter = ViewData["StatusFilter"], 
                                                                       departmentFilter = ViewData["DepartmentFilter"], 
                                                                       locationFilter = ViewData["LocationFilter"],
                                                                       floorFilter = floor 
                                                                   })">
                                                                    @floor
                                                                </a>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-status">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["StatusSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" asp-route-categoryFilter="@ViewData["CategoryFilter"]" asp-route-statusFilter="@ViewData["StatusFilter"]" asp-route-departmentFilter="@ViewData["DepartmentFilter"]" class="text-decoration-none me-2">
                                            Status
                                            @if (ViewData["CurrentSort"]?.ToString() == "status_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "status")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["StatusFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 300px; overflow-y: auto; min-width: 250px;">
                                                <li><h6 class="dropdown-header">Filter by Status</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search statuses..." 
                                                               onkeyup="filterDropdownItems(this, 'status-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="status-filter-items">
                                                        @foreach (var status in ViewData["StatusOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <a class="dropdown-item @(status == ViewData["StatusFilter"]?.ToString() ? "active" : "")" 
                                                                   href="@Url.Action("Index", new { 
                                                                       sortOrder = ViewData["CurrentSort"], 
                                                                       currentFilter = ViewData["CurrentFilter"], 
                                                                       categoryFilter = ViewData["CategoryFilter"], 
                                                                       statusFilter = status, 
                                                                       departmentFilter = ViewData["DepartmentFilter"] 
                                                                   })">
                                                                    @status
                                                                </a>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-net-name">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["NetNameSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" asp-route-categoryFilter="@ViewData["CategoryFilter"]" asp-route-statusFilter="@ViewData["StatusFilter"]" asp-route-departmentFilter="@ViewData["DepartmentFilter"]" class="text-decoration-none me-2">
                                            Net Name
                                            @if (ViewData["CurrentSort"]?.ToString() == "netname_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "netname")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["NetNameFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 300px; overflow-y: auto; min-width: 250px;">
                                                <li><h6 class="dropdown-header">Filter by Net Name</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search net names..." 
                                                               onkeyup="filterDropdownItems(this, 'netname-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="netname-filter-items">
                                                        @foreach (var netName in ViewData["NetNameOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <a class="dropdown-item @(netName == ViewData["NetNameFilter"]?.ToString() ? "active" : "")" 
                                                                   href="@Url.Action("Index", new { 
                                                                       sortOrder = ViewData["CurrentSort"], 
                                                                       currentFilter = ViewData["CurrentFilter"], 
                                                                       categoryFilter = ViewData["CategoryFilter"], 
                                                                       statusFilter = ViewData["StatusFilter"], 
                                                                       departmentFilter = ViewData["DepartmentFilter"], 
                                                                       netNameFilter = netName 
                                                                   })">
                                                                    @netName
                                                                </a>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-model">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["ModelSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" asp-route-categoryFilter="@ViewData["CategoryFilter"]" asp-route-statusFilter="@ViewData["StatusFilter"]" asp-route-departmentFilter="@ViewData["DepartmentFilter"]" class="text-decoration-none me-2">
                                            Model
                                            @if (ViewData["CurrentSort"]?.ToString() == "model_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "model")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["ModelFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 300px; overflow-y: auto; min-width: 250px;">
                                                <li><h6 class="dropdown-header">Filter by Model</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search models..." 
                                                               onkeyup="filterDropdownItems(this, 'model-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="model-filter-items">
                                                        @foreach (var model in ViewData["ModelOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <a class="dropdown-item @(model == ViewData["ModelFilter"]?.ToString() ? "active" : "")" 
                                                                   href="@Url.Action("Index", new { 
                                                                       sortOrder = ViewData["CurrentSort"], 
                                                                       currentFilter = ViewData["CurrentFilter"], 
                                                                       categoryFilter = ViewData["CategoryFilter"], 
                                                                       statusFilter = ViewData["StatusFilter"], 
                                                                       departmentFilter = ViewData["DepartmentFilter"], 
                                                                       modelFilter = model 
                                                                   })">

                                                                </a>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-serial-number">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["SerialNumberSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" asp-route-categoryFilter="@ViewData["CategoryFilter"]" asp-route-statusFilter="@ViewData["StatusFilter"]" asp-route-departmentFilter="@ViewData["DepartmentFilter"]" class="text-decoration-none me-2">
                                            Serial Number
                                            @if (ViewData["CurrentSort"]?.ToString() == "serialnumber_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "serialnumber")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["SerialNumberFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 300px; overflow-y: auto; min-width: 250px;">
                                                <li><h6 class="dropdown-header">Filter by Serial Number</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search serial numbers..." 
                                                               onkeyup="filterDropdownItems(this, 'serialnumber-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="serialnumber-filter-items">
                                                        @foreach (var serialNumber in ViewData["SerialNumberOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <a class="dropdown-item @(serialNumber == ViewData["SerialNumberFilter"]?.ToString() ? "active" : "")" 
                                                                   href="@Url.Action("Index", new { 
                                                                       sortOrder = ViewData["CurrentSort"], 
                                                                       currentFilter = ViewData["CurrentFilter"], 
                                                                       categoryFilter = ViewData["CategoryFilter"], 
                                                                       statusFilter = ViewData["StatusFilter"], 
                                                                       departmentFilter = ViewData["DepartmentFilter"], 
                                                                       serialNumberFilter = serialNumber 
                                                                   })">
                                                                    @serialNumber
                                                                </a>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-desk-number">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["DeskNumberSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" asp-route-categoryFilter="@ViewData["CategoryFilter"]" asp-route-statusFilter="@ViewData["StatusFilter"]" asp-route-departmentFilter="@ViewData["DepartmentFilter"]" class="text-decoration-none me-2">
                                            Desk Number
                                            @if (ViewData["CurrentSort"]?.ToString() == "desknumber_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "desknumber")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["DeskNumberFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 300px; overflow-y: auto; min-width: 250px;">
                                                <li><h6 class="dropdown-header">Filter by Desk Number</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search desk numbers..." 
                                                               onkeyup="filterDropdownItems(this, 'desknumber-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="desknumber-filter-items">
                                                        @foreach (var deskNumber in ViewData["DeskNumberOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <a class="dropdown-item @(deskNumber == ViewData["DeskNumberFilter"]?.ToString() ? "active" : "")" 
                                                                   href="@Url.Action("Index", new { 
                                                                       sortOrder = ViewData["CurrentSort"], 
                                                                       currentFilter = ViewData["CurrentFilter"], 
                                                                       categoryFilter = ViewData["CategoryFilter"], 
                                                                       statusFilter = ViewData["StatusFilter"], 
                                                                       departmentFilter = ViewData["DepartmentFilter"], 
                                                                       serialNumberFilter = ViewData["SerialNumberFilter"],
                                                                       deskNumberFilter = deskNumber 
                                                                   })">
                                                                    @deskNumber
                                                                </a>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-manufacturer">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["ManufacturerSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" asp-route-categoryFilter="@ViewData["CategoryFilter"]" asp-route-statusFilter="@ViewData["StatusFilter"]" asp-route-departmentFilter="@ViewData["DepartmentFilter"]" class="text-decoration-none me-2">
                                            Manufacturer
                                            @if (ViewData["CurrentSort"]?.ToString() == "manufacturer_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "manufacturer")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["ManufacturerFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 300px; overflow-y: auto; min-width: 250px;">
                                                <li><h6 class="dropdown-header">Filter by Manufacturer</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search manufacturers..." 
                                                               onkeyup="filterDropdownItems(this, 'manufacturer-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="manufacturer-filter-items">
                                                        @foreach (var manufacturer in ViewData["ManufacturerOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <a class="dropdown-item @(manufacturer == ViewData["ManufacturerFilter"]?.ToString() ? "active" : "")" 
                                                                   href="@Url.Action("Index", new { 
                                                                       sortOrder = ViewData["CurrentSort"], 
                                                                       currentFilter = ViewData["CurrentFilter"], 
                                                                       categoryFilter = ViewData["CategoryFilter"], 
                                                                       statusFilter = ViewData["StatusFilter"], 
                                                                       departmentFilter = ViewData["DepartmentFilter"], 
                                                                       serialNumberFilter = ViewData["SerialNumberFilter"],
                                                                       deskNumberFilter = ViewData["DeskNumberFilter"],
                                                                       manufacturerFilter = manufacturer 
                                                                   })">
                                                                    @manufacturer
                                                                </a>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-purchase-date">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["PurchaseDateSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" asp-route-categoryFilter="@ViewData["CategoryFilter"]" asp-route-statusFilter="@ViewData["StatusFilter"]" asp-route-departmentFilter="@ViewData["DepartmentFilter"]" class="text-decoration-none me-2">
                                            Purchase Date
                                            @if (ViewData["CurrentSort"]?.ToString() == "purchasedate_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "purchasedate")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle filter-button @(!string.IsNullOrEmpty(ViewData["PurchaseDateFilter"]?.ToString()) ? "active" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-funnel"></i>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end" style="max-height: 300px; overflow-y: auto; min-width: 250px;">
                                                <li><h6 class="dropdown-header">Filter by Purchase Date</h6></li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2">
                                                        <input type="text" class="form-control form-control-sm" placeholder="Search purchase dates..." 
                                                               onkeyup="filterDropdownItems(this, 'purchasedate-filter-items')">
                                                    </div>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <div class="px-3 py-2" id="purchasedate-filter-items">
                                                        @foreach (var purchaseDate in ViewData["PurchaseDateOptions"] as List<string> ?? new List<string>())
                                                        {
                                                            <div class="filter-item">
                                                                <a class="dropdown-item @(purchaseDate == ViewData["PurchaseDateFilter"]?.ToString() ? "active" : "")" 
                                                                   href="@Url.Action("Index", new { 
                                                                       sortOrder = ViewData["CurrentSort"], 
                                                                       currentFilter = ViewData["CurrentFilter"], 
                                                                       categoryFilter = ViewData["CategoryFilter"], 
                                                                       statusFilter = ViewData["StatusFilter"], 
                                                                       departmentFilter = ViewData["DepartmentFilter"], 
                                                                       serialNumberFilter = ViewData["SerialNumberFilter"],
                                                                       deskNumberFilter = ViewData["DeskNumberFilter"],
                                                                       manufacturerFilter = ViewData["ManufacturerFilter"],
                                                                       purchaseDateFilter = purchaseDate 
                                                                   })">
                                                                    @purchaseDate
                                                                </a>
                                                            </div>
                                                        }
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </th>
                                <th class="column-asset-tag">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["AssetTagSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" class="text-decoration-none me-2">
                                            Asset Tag
                                            @if (ViewData["CurrentSort"]?.ToString() == "asset_tag_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "asset_tag")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                    </div>
                                </th>
                                <th class="column-service-tag">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["ServiceTagSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" class="text-decoration-none me-2">
                                            Service Tag
                                            @if (ViewData["CurrentSort"]?.ToString() == "service_tag_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "service_tag")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                    </div>
                                </th>
                                <th class="column-ip-address">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["IPAddressSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" class="text-decoration-none me-2">
                                            IP Address
                                            @if (ViewData["CurrentSort"]?.ToString() == "ip_address_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "ip_address")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                    </div>
                                </th>
                                <th class="column-os-version">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["OSVersionSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" class="text-decoration-none me-2">
                                            OS Version
                                            @if (ViewData["CurrentSort"]?.ToString() == "os_version_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "os_version")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                    </div>
                                </th>
                                <th class="column-phone-number">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["PhoneNumberSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" class="text-decoration-none me-2">
                                            Phone Number
                                            @if (ViewData["CurrentSort"]?.ToString() == "phone_number_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "phone_number")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                    </div>
                                </th>
                                <th class="column-purchase-price">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["PurchasePriceSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" class="text-decoration-none me-2">
                                            Purchase Price
                                            @if (ViewData["CurrentSort"]?.ToString() == "purchase_price_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "purchase_price")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                    </div>
                                </th>
                                <th class="column-warranty-end">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["WarrantyEndSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" class="text-decoration-none me-2">
                                            Warranty End
                                            @if (ViewData["CurrentSort"]?.ToString() == "warranty_end_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "warranty_end")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                    </div>
                                </th>
                                <th class="column-notes">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["NotesSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" class="text-decoration-none me-2">
                                            Notes
                                            @if (ViewData["CurrentSort"]?.ToString() == "notes_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "notes")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                    </div>
                                </th>
                                <th class="column-created-at">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["CreatedAtSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" class="text-decoration-none me-2">
                                            Created At
                                            @if (ViewData["CurrentSort"]?.ToString() == "created_at_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "created_at")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                    </div>
                                </th>
                                <th class="column-updated-at">
                                    <div class="d-flex align-items-center">
                                        <a asp-action="Index" asp-route-sortOrder="@ViewData["UpdatedAtSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" class="text-decoration-none me-2">
                                            Updated At
                                            @if (ViewData["CurrentSort"]?.ToString() == "updated_at_desc")
                                            {
                                                <i class="bi bi-sort-alpha-down ms-1"></i>
                                            }
                                            else if (ViewData["CurrentSort"]?.ToString() == "updated_at")
                                            {
                                                <i class="bi bi-sort-alpha-up ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-arrow-down-up ms-1 text-muted"></i>
                                            }
                                        </a>
                                    </div>
                                </th>
                                <th class="actions-header">
                                    <div class="d-flex align-items-center justify-content-between">
                                        <span>Actions</span>
                                        <button class="btn btn-sm btn-outline-secondary ms-2" type="button" data-bs-toggle="modal" data-bs-target="#columnSettingsModal" title="Column Settings">
                                            <i class="bi bi-gear"></i>
                                        </button>
                                    </div>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Debug: Equipment IDs on this page: @string.Join(", ", Model.Select(e => e.Id)) -->
                            @foreach (var item in Model)
                            {
                                <tr class="equipment-row" data-equipment-id="@item.Id" data-oath-tag="@item.OATH_Tag">
                                    <!-- Debug: Equipment ID @item.Id, OATH Tag @item.OATH_Tag -->
                                    <td class="column-oath-tag editable-cell" data-field="OATH_Tag" data-value="@item.OATH_Tag" style="cursor: pointer;">@item.OATH_Tag</td>
                                    <td class="column-assigned-to editable-cell" data-field="Assigned_User_Name" data-value="@(item.Assigned_User_Name ?? "")" style="cursor: pointer;">@(item.Assigned_User_Name ?? "Unassigned")</td>
                                    <td class="column-category editable-cell" data-field="AssetCategoryId" data-value="@(item.AssetCategory?.Name ?? "")" style="cursor: pointer;">@(item.AssetCategory?.Name ?? "Unknown")</td>
                                    <td class="column-unit editable-cell" data-field="Department" data-value="@(item.Department ?? "")" style="cursor: pointer;">@(item.Department ?? "Unknown")</td>
                                    <td class="column-location editable-cell" data-field="CurrentLocationId" data-value="@(item.CurrentLocation?.Name ?? "Unknown")" style="cursor: pointer;">@(item.CurrentLocation?.Name ?? "Unknown")</td>
                                    <td class="column-floor editable-cell" data-field="CurrentFloorPlanId" data-value="@(item.CurrentFloorPlan?.FloorName ?? "Unknown")" style="cursor: pointer;">@(item.CurrentFloorPlan?.FloorName ?? "Unknown")</td>
                                    <td class="column-status editable-cell" data-field="CurrentStatusId" data-value="@(item.CurrentStatus?.Name ?? "")" style="cursor: pointer;">@(item.CurrentStatus?.Name ?? "Unknown")</td>
                                    <td class="column-net-name editable-cell" data-field="NetName" data-value="@(item.TechnologyConfiguration?.NetName ?? "")" style="cursor: pointer;">@(item.TechnologyConfiguration?.NetName ?? "N/A")</td>
                                    <td class="column-model editable-cell" data-field="Model" data-value="@(item.Model ?? "")" style="cursor: pointer;">@(item.Model ?? "Unknown")</td>
                                    <td class="column-serial-number editable-cell" data-field="Serial_Number" data-value="@(item.Serial_Number ?? "")" style="cursor: pointer;">@(item.Serial_Number ?? "N/A")</td>
                                    <td class="column-desk-number editable-cell" data-field="CurrentDeskId" data-value="@(item.CurrentDesk?.DeskName ?? "")" style="cursor: pointer;">@(item.CurrentDesk?.DeskName ?? "N/A")</td>
                                    <td class="column-manufacturer editable-cell" data-field="Manufacturer" data-value="@(item.Manufacturer ?? "")" style="cursor: pointer;">@(item.Manufacturer ?? "Unknown")</td>
                                    <td class="column-purchase-date editable-cell" data-field="PurchaseDate" data-value="@(item.PurchaseDate?.ToString("MM/dd/yyyy") ?? "")" style="cursor: pointer;">@(item.PurchaseDate?.ToString("MM/dd/yyyy") ?? "N/A")</td>
                                    <td class="column-asset-tag editable-cell" data-field="Asset_Tag" data-value="@(item.Asset_Tag ?? "")" style="cursor: pointer;" title="@(item.Asset_Tag ?? "N/A")">@(string.IsNullOrEmpty(item.Asset_Tag) ? "N/A" : (item.Asset_Tag.Length > 15 ? item.Asset_Tag.Substring(0, 15) + "..." : item.Asset_Tag))</td>
                                    <td class="column-service-tag editable-cell" data-field="Service_Tag" data-value="@(item.Service_Tag ?? "")" style="cursor: pointer;" title="@(item.Service_Tag ?? "N/A")">@(string.IsNullOrEmpty(item.Service_Tag) ? "N/A" : (item.Service_Tag.Length > 15 ? item.Service_Tag.Substring(0, 15) + "..." : item.Service_Tag))</td>
                                    <td class="column-ip-address editable-cell" data-field="IP_Address" data-value="@(item.IP_Address ?? "")" style="cursor: pointer;" title="@(item.IP_Address ?? "N/A")">@(string.IsNullOrEmpty(item.IP_Address) ? "N/A" : (item.IP_Address.Length > 15 ? item.IP_Address.Substring(0, 15) + "..." : item.IP_Address))</td>
                                    <td class="column-os-version editable-cell" data-field="OS_Version" data-value="@(item.OS_Version ?? "")" style="cursor: pointer;" title="@(item.OS_Version ?? "N/A")">@(string.IsNullOrEmpty(item.OS_Version) ? "N/A" : (item.OS_Version.Length > 15 ? item.OS_Version.Substring(0, 15) + "..." : item.OS_Version))</td>
                                    <td class="column-phone-number editable-cell" data-field="Phone_Number" data-value="@(item.Phone_Number ?? "")" style="cursor: pointer;" title="@(item.Phone_Number ?? "N/A")">@(string.IsNullOrEmpty(item.Phone_Number) ? "N/A" : (item.Phone_Number.Length > 15 ? item.Phone_Number.Substring(0, 15) + "..." : item.Phone_Number))</td>
                                    <td class="column-purchase-price editable-cell" data-field="PurchasePrice" data-value="@(item.PurchasePrice?.ToString() ?? "")" style="cursor: pointer;" title="@(item.PurchasePrice?.ToString("C") ?? "N/A")">@(item.PurchasePrice?.ToString("C") ?? "N/A")</td>
                                    <td class="column-warranty-end editable-cell" data-field="WarrantyEndDate" data-value="@(item.WarrantyEndDate?.ToString("MM/dd/yyyy") ?? "")" style="cursor: pointer;" title="@(item.WarrantyEndDate?.ToString("MM/dd/yyyy") ?? "N/A")">@(item.WarrantyEndDate?.ToString("MM/dd/yyyy") ?? "N/A")</td>
                                    <td class="column-notes editable-cell" data-field="Notes" data-value="@(item.Notes ?? "")" style="cursor: pointer;" title="@(item.Notes ?? "N/A")">@(string.IsNullOrEmpty(item.Notes) ? "N/A" : (item.Notes.Length > 20 ? item.Notes.Substring(0, 20) + "..." : item.Notes))</td>
                                    <td class="column-created-at" title="@(item.CreatedAt.ToString("MM/dd/yyyy HH:mm"))">@(item.CreatedAt.ToString("MM/dd/yyyy"))</td>
                                    <td class="column-updated-at" title="@(item.UpdatedAt?.ToString("MM/dd/yyyy HH:mm") ?? "N/A")">@(item.UpdatedAt?.ToString("MM/dd/yyyy") ?? "N/A")</td>
                                    <td>
                                        <div class="btn-group btn-group-sm" role="group">
                                            <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-outline-primary" title="View Details">
                                                <i class="bi bi-eye"></i>
                                            </a>
                                            <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-outline-secondary" title="Edit">
                                                <i class="bi bi-pencil"></i>
                                            </a>
                                            <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-outline-danger" title="Delete">
                                                <i class="bi bi-trash"></i>
                                            </a>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                <div class="d-flex justify-content-between align-items-center mt-3">
                    <div class="d-flex align-items-center">
                        <span class="text-muted me-3">
                            @{
                                var currentPageSize = ViewData["CurrentPageSize"] as int? ?? 20;
                                var startItem = (Model.PageIndex - 1) * currentPageSize + 1;
                                var endItem = Math.Min(Model.PageIndex * currentPageSize, Model.TotalCount);
                            }
                            Showing @startItem to @endItem of @Model.TotalCount entries
                        </span>
                        <div class="d-flex align-items-center">
                            <label class="form-label me-2 mb-0">Show:</label>
                            <select class="form-select form-select-sm" style="width: auto;" onchange="changePageSize(this.value)">
                                @{
                                    var pageSizeOptions = new List<int> { 10, 25, 50, 100 };
                                    var pageSize = ViewData["CurrentPageSize"] as int? ?? 20;
                                }
                                @foreach (var size in pageSizeOptions)
                                {
                                    if (size == pageSize)
                                    {
                                        <option value="@size" selected>@size</option>
                                    }
                                    else
                                    {
                                        <option value="@size">@size</option>
                                    }
                                }
                            </select>
                            <span class="text-muted ms-2">entries per page</span>
                        </div>
                    </div>
                    
                    <nav aria-label="Equipment pagination">
                        <ul class="pagination pagination-sm mb-0">
                            @if (Model.HasPreviousPage)
                            {
                                <li class="page-item">
                                    <a class="page-link" asp-action="Index" asp-route-sortOrder="@ViewData["CurrentSort"]" asp-route-pageNumber="@(Model.PageIndex - 1)" asp-route-currentFilter="@ViewData["CurrentFilter"]" asp-route-categoryFilter="@ViewData["CategoryFilter"]" asp-route-statusFilter="@ViewData["StatusFilter"]" asp-route-departmentFilter="@ViewData["DepartmentFilter"]" asp-route-oathTagFilter="@ViewData["OathTagFilter"]" asp-route-assignedToFilter="@ViewData["AssignedToFilter"]" asp-route-locationFilter="@ViewData["LocationFilter"]" asp-route-netNameFilter="@ViewData["NetNameFilter"]" asp-route-modelFilter="@ViewData["ModelFilter"]" asp-route-serialNumberFilter="@ViewData["SerialNumberFilter"]" asp-route-deskNumberFilter="@ViewData["DeskNumberFilter"]" asp-route-manufacturerFilter="@ViewData["ManufacturerFilter"]" asp-route-purchaseDateFilter="@ViewData["PurchaseDateFilter"]">
                                        <i class="bi bi-chevron-left"></i>
                                    </a>
                                </li>
                            }
                            else
                            {
                                <li class="page-item disabled">
                                    <span class="page-link"><i class="bi bi-chevron-left"></i></span>
                                </li>
                            }

                            @{
                                var startPage = Math.Max(1, Model.PageIndex - 2);
                                var endPage = Math.Min(Model.TotalPages, Model.PageIndex + 2);
                            }

                            @if (startPage > 1)
                            {
                                <li class="page-item">
                                    <a class="page-link" asp-action="Index" asp-route-sortOrder="@ViewData["CurrentSort"]" asp-route-pageNumber="1" asp-route-currentFilter="@ViewData["CurrentFilter"]" asp-route-categoryFilter="@ViewData["CategoryFilter"]" asp-route-statusFilter="@ViewData["StatusFilter"]" asp-route-departmentFilter="@ViewData["DepartmentFilter"]" asp-route-oathTagFilter="@ViewData["OathTagFilter"]" asp-route-assignedToFilter="@ViewData["AssignedToFilter"]" asp-route-locationFilter="@ViewData["LocationFilter"]" asp-route-netNameFilter="@ViewData["NetNameFilter"]" asp-route-modelFilter="@ViewData["ModelFilter"]" asp-route-serialNumberFilter="@ViewData["SerialNumberFilter"]" asp-route-deskNumberFilter="@ViewData["DeskNumberFilter"]" asp-route-manufacturerFilter="@ViewData["ManufacturerFilter"]" asp-route-purchaseDateFilter="@ViewData["PurchaseDateFilter"]">1</a>
                                </li>
                                @if (startPage > 2)
                                {
                                    <li class="page-item disabled">
                                        <span class="page-link">...</span>
                                    </li>
                                }
                            }

                            @for (int i = startPage; i <= endPage; i++)
                            {
                                if (i == Model.PageIndex)
                                {
                                    <li class="page-item active">
                                        <span class="page-link">@i</span>
                                    </li>
                                }
                                else
                                {
                                    <li class="page-item">
                                        <a class="page-link" asp-action="Index" asp-route-sortOrder="@ViewData["CurrentSort"]" asp-route-pageNumber="@i" asp-route-currentFilter="@ViewData["CurrentFilter"]" asp-route-categoryFilter="@ViewData["CategoryFilter"]" asp-route-statusFilter="@ViewData["StatusFilter"]" asp-route-departmentFilter="@ViewData["DepartmentFilter"]" asp-route-oathTagFilter="@ViewData["OathTagFilter"]" asp-route-assignedToFilter="@ViewData["AssignedToFilter"]" asp-route-locationFilter="@ViewData["LocationFilter"]" asp-route-netNameFilter="@ViewData["NetNameFilter"]" asp-route-modelFilter="@ViewData["ModelFilter"]" asp-route-serialNumberFilter="@ViewData["SerialNumberFilter"]" asp-route-deskNumberFilter="@ViewData["DeskNumberFilter"]" asp-route-manufacturerFilter="@ViewData["ManufacturerFilter"]" asp-route-purchaseDateFilter="@ViewData["PurchaseDateFilter"]">@i</a>
                                    </li>
                                }
                            }

                            @if (endPage < Model.TotalPages)
                            {
                                @if (endPage < Model.TotalPages - 1)
                                {
                                    <li class="page-item disabled">
                                        <span class="page-link">...</span>
                                    </li>
                                }
                                <li class="page-item">
                                    <a class="page-link" asp-action="Index" asp-route-sortOrder="@ViewData["CurrentSort"]" asp-route-pageNumber="@Model.TotalPages" asp-route-currentFilter="@ViewData["CurrentFilter"]" asp-route-categoryFilter="@ViewData["CategoryFilter"]" asp-route-statusFilter="@ViewData["StatusFilter"]" asp-route-departmentFilter="@ViewData["DepartmentFilter"]" asp-route-oathTagFilter="@ViewData["OathTagFilter"]" asp-route-assignedToFilter="@ViewData["AssignedToFilter"]" asp-route-locationFilter="@ViewData["LocationFilter"]" asp-route-netNameFilter="@ViewData["NetNameFilter"]" asp-route-modelFilter="@ViewData["ModelFilter"]" asp-route-serialNumberFilter="@ViewData["SerialNumberFilter"]" asp-route-deskNumberFilter="@ViewData["DeskNumberFilter"]" asp-route-manufacturerFilter="@ViewData["ManufacturerFilter"]" asp-route-purchaseDateFilter="@ViewData["PurchaseDateFilter"]">@Model.TotalPages</a>
                                </li>
                            }

                            @if (Model.HasNextPage)
                            {
                                <li class="page-item">
                                    <a class="page-link" asp-action="Index" asp-route-sortOrder="@ViewData["CurrentSort"]" asp-route-pageNumber="@(Model.PageIndex + 1)" asp-route-currentFilter="@ViewData["CurrentFilter"]" asp-route-categoryFilter="@ViewData["CategoryFilter"]" asp-route-statusFilter="@ViewData["StatusFilter"]" asp-route-departmentFilter="@ViewData["DepartmentFilter"]" asp-route-oathTagFilter="@ViewData["OathTagFilter"]" asp-route-assignedToFilter="@ViewData["AssignedToFilter"]" asp-route-locationFilter="@ViewData["LocationFilter"]" asp-route-netNameFilter="@ViewData["NetNameFilter"]" asp-route-modelFilter="@ViewData["ModelFilter"]" asp-route-serialNumberFilter="@ViewData["SerialNumberFilter"]" asp-route-deskNumberFilter="@ViewData["DeskNumberFilter"]" asp-route-manufacturerFilter="@ViewData["ManufacturerFilter"]" asp-route-purchaseDateFilter="@ViewData["PurchaseDateFilter"]">
                                        <i class="bi bi-chevron-right"></i>
                                    </a>
                                </li>
                            }
                            else
                            {
                                <li class="page-item disabled">
                                    <span class="page-link"><i class="bi bi-chevron-right"></i></span>
                                </li>
                            }
                        </ul>
                    </nav>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let searchTimeout = null;
        let searchSuggestions = [];

        function filterDropdownItems(input, containerId) {
            const filter = input.value.toLowerCase();
            const container = document.getElementById(containerId);
            const items = container.querySelectorAll('.filter-item');
            
            items.forEach(item => {
                const text = item.textContent.toLowerCase();
                if (text.includes(filter)) {
                    item.style.display = 'block';
                } else {
                    item.style.display = 'none';
                }
            });
        }

        function changePageSize(size) {
            const url = new URL(window.location);
            url.searchParams.set('pageSize', size);
            url.searchParams.set('pageNumber', '1');
            window.location.href = url.toString();
        }

        // Master search functionality
        function initializeMasterSearch() {
            const searchInput = document.getElementById('searchInput');
            const suggestionsContainer = document.getElementById('searchSuggestions');
            
            if (!searchInput) return;

            // Show quick suggestions based on current page data
            function showSuggestions(query) {
                if (!query || query.length < 2) {
                    suggestionsContainer.style.display = 'none';
                    return;
                }

                // Show a "Search all equipment" option
                const suggestionsHtml = `
                    <div class="suggestion-item p-2 border-bottom" style="cursor: pointer;" 
                         onclick="performMasterSearch('${query}')">
                        <div class="d-flex align-items-center">
                            <div class="me-2">
                                <i class="bi bi-search text-primary"></i>
                            </div>
                            <div class="flex-grow-1">
                                <div class="fw-medium">Search for "${query}"</div>
                                <div class="small text-muted">
                                    Search all equipment across OATH Tag, Serial, Net Name, User, Model, Manufacturer, Department, Location...
                                </div>
                            </div>
                        </div>
                    </div>
                `;

                suggestionsContainer.innerHTML = suggestionsHtml;
                suggestionsContainer.style.display = 'block';
            }

            function performMasterSearch(query) {
                searchInput.value = query;
                suggestionsContainer.style.display = 'none';
                searchInput.form.submit();
            }



            // Handle input events
            searchInput.addEventListener('input', function(e) {
                const query = e.target.value.trim();
                
                // Clear previous timeout
                if (searchTimeout) {
                    clearTimeout(searchTimeout);
                }

                // Debounce the search
                searchTimeout = setTimeout(() => {
                    showSuggestions(query);
                }, 300);
            });

            // Handle keyboard navigation
            searchInput.addEventListener('keydown', function(e) {
                if (e.key === 'Enter') {
                    suggestionsContainer.style.display = 'none';
                    return; // Let the form submit normally
                }
                
                if (e.key === 'Escape') {
                    suggestionsContainer.style.display = 'none';
                    searchInput.blur();
                }
            });

            // Hide suggestions when clicking outside
            document.addEventListener('click', function(e) {
                if (!searchInput.contains(e.target) && !suggestionsContainer.contains(e.target)) {
                    suggestionsContainer.style.display = 'none';
                }
            });

            // Add keyboard shortcut for focusing search
            document.addEventListener('keydown', function(e) {
                // Ctrl+F or Cmd+F to focus search
                if ((e.ctrlKey || e.metaKey) && e.key === 'f') {
                    e.preventDefault();
                    searchInput.focus();
                    searchInput.select();
                }
            });
        }

        // Prevent dropdown from closing when clicking on search input
        document.addEventListener('DOMContentLoaded', function() {
            const dropdownInputs = document.querySelectorAll('.dropdown-menu input[type="text"]');
            dropdownInputs.forEach(input => {
                input.addEventListener('click', function(e) {
                    e.stopPropagation();
                });
            });

                    // Initialize master search
        initializeMasterSearch();
        
        // Initialize inline cell editing functionality
        initializeInlineEditing();
        
        // Initialize column management
        initializeColumnManagement();
        
        // Debug: Show equipment IDs on current page
        const equipmentRows = Array.from(document.querySelectorAll('tr[data-equipment-id]'));
        const equipmentData = equipmentRows.map(row => ({
            id: row.getAttribute('data-equipment-id'),
            oathTag: row.getAttribute('data-oath-tag')
        }));
        console.log('Equipment data on current page:', equipmentData);
        console.log('Equipment IDs on current page:', equipmentData.map(e => e.id));
        console.log('OATH Tags on current page:', equipmentData.map(e => e.oathTag));
        if (equipmentData.length > 0) {
            console.log('First 5 equipment:', equipmentData.slice(0, 5));
        }
    });
    
    // Inline cell editing functionality
    function initializeInlineEditing() {
        const editableCells = document.querySelectorAll('.editable-cell');
        
        editableCells.forEach(cell => {
            cell.addEventListener('dblclick', function(e) {
                // Don't trigger if clicking on action buttons
                if (e.target.closest('.btn-group') || e.target.closest('.btn')) {
                    return;
                }
                
                startInlineEdit(this);
            });
            
            // Add hover effect
            cell.addEventListener('mouseenter', function() {
                this.style.backgroundColor = '#f0f8ff';
            });
            
            cell.addEventListener('mouseleave', function() {
                this.style.backgroundColor = '';
            });
        });
    }
    
    function startInlineEdit(cell) {
        const currentValue = cell.getAttribute('data-value') || cell.textContent.trim();
        const fieldName = cell.getAttribute('data-field');
        const equipmentId = cell.closest('tr').getAttribute('data-oath-tag');
        
        console.log('Starting inline edit:', {
            currentValue,
            fieldName,
            equipmentId,
            equipmentIdType: typeof equipmentId,
            cellData: {
                dataValue: cell.getAttribute('data-value'),
                dataField: cell.getAttribute('data-field')
            }
        });
        
        // Debug: Show all equipment IDs on current page
        const allEquipmentIds = Array.from(document.querySelectorAll('tr[data-equipment-id]'))
            .map(row => ({ id: row.getAttribute('data-equipment-id'), oathTag: row.getAttribute('data-oath-tag') }));
        console.log('Equipment IDs on current page:', allEquipmentIds);
        
        // Create input element
        const input = document.createElement('input');
        input.type = 'text';
        input.className = 'form-control form-control-sm';
        input.value = currentValue;
        input.style.width = '100%';
        input.style.minWidth = '120px';
        
        // Store original content
        const originalContent = cell.innerHTML;
        let isProcessing = false;
        
        // Replace cell content with input
        cell.innerHTML = '';
        cell.appendChild(input);
        input.focus();
        input.select();
        
        // Handle save on Enter or blur
        function saveEdit() {
            if (isProcessing) return; // Prevent multiple saves
            isProcessing = true;
            const newValue = input.value.trim();
            
            if (newValue !== currentValue) {
                // Show loading state
                cell.innerHTML = '<i class="bi bi-hourglass-split"></i> Saving...';
                
                // Send update request
                updateEquipmentField(equipmentId, fieldName, newValue)
                    .then(response => {
                        console.log('Processing response:', JSON.stringify(response, null, 2));
                        if (response.Success || response.success) {
                            // Update cell content and data attribute
                            cell.textContent = newValue || (fieldName === 'Assigned_User_Name' ? 'Unassigned' : 
                                                           fieldName === 'AssetCategoryId' ? 'Unknown' : 
                                                           fieldName === 'Department' ? 'Unknown' : 
                                                           fieldName === 'CurrentLocationId' ? 'Unknown' : 
                                                           fieldName === 'CurrentStatusId' ? 'Unknown' : 
                                                           fieldName === 'NetName' ? 'N/A' : 
                                                           fieldName === 'Model' ? 'Unknown' : 
                                                           fieldName === 'Serial_Number' ? 'N/A' : 'Unknown');
                            cell.setAttribute('data-value', newValue);
                            
                            // Show success indicator
                            cell.style.backgroundColor = '#d4edda';
                            setTimeout(() => {
                                cell.style.backgroundColor = '';
                            }, 1000);
                            
                            // Show success message
                            showToast('Field updated successfully!', 'success');
                        } else {
                            // Show error and restore original content
                            cell.innerHTML = originalContent;
                            cell.style.backgroundColor = '#f8d7da';
                            setTimeout(() => {
                                cell.style.backgroundColor = '';
                            }, 2000);
                            
                            // Show error message
                            showToast('Error updating field: ' + (response.Message || response.message), 'error');
                        }
                    })
                    .catch(error => {
                        // Show error and restore original content
                        cell.innerHTML = originalContent;
                        cell.style.backgroundColor = '#f8d7da';
                        setTimeout(() => {
                            cell.style.backgroundColor = '';
                        }, 2000);
                        
                        // Show error message
                        showToast('Error updating field: ' + error.message, 'error');
                    });
            } else {
                // No change, restore original content
                cell.innerHTML = originalContent;
            }
        }
        
        // Handle cancel on Escape
        function cancelEdit() {
            if (isProcessing) return; // Prevent conflicts
            isProcessing = true;
            cell.innerHTML = originalContent;
        }
        
        // Event listeners
        input.addEventListener('blur', function() {
            // Small delay to prevent DOM manipulation conflicts
            setTimeout(() => {
                if (!isProcessing) {
                    saveEdit();
                }
            }, 10);
        });
        
        input.addEventListener('keydown', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                saveEdit();
            } else if (e.key === 'Escape') {
                e.preventDefault();
                cancelEdit();
            }
        });
    }
    
    async function updateEquipmentField(equipmentId, fieldName, value) {
        try {
            console.log('Sending update request:', { equipmentId, fieldName, value });
            console.log('Equipment ID type:', typeof equipmentId, 'Value:', equipmentId);
            
            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
            if (!token) {
                console.error('Anti-forgery token not found');
                return { Success: false, Message: 'Security token not found' };
            }
            
            const response = await fetch('/Equipment/UpdateField', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({
                    id: equipmentId,
                    field: fieldName,
                    value: value
                })
            });
            
            console.log('Response status:', response.status);
            
            if (!response.ok) {
                const errorText = await response.text();
                console.error('HTTP error:', response.status, errorText);
                return { Success: false, Message: `HTTP ${response.status}: ${errorText}` };
            }
            
            const result = await response.json();
            console.log('Response data:', JSON.stringify(result, null, 2));
            return result;
        } catch (error) {
            console.error('Fetch error:', error);
            return { Success: false, Message: error.message };
        }
    }
    
    function showToast(message, type = 'info') {
        // Create toast element
        const toast = document.createElement('div');
        toast.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show position-fixed`;
        toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
        toast.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        
        document.body.appendChild(toast);
        
        // Auto-remove after 3 seconds
        setTimeout(() => {
            if (toast.parentNode) {
                toast.remove();
            }
        }, 3000);
    }
    
    // Column Management Functions
    function initializeColumnManagement() {
        loadColumnPreferences();
        initializeColumnOrder();
        initializeTooltips();
        syncModalCheckboxes();
        
        document.querySelectorAll('.column-toggle').forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                toggleColumn(this.dataset.column, this.checked);
                saveColumnPreferences();
                syncModalCheckboxes();
            });
        });
    }

    // Sync modal checkboxes with main checkboxes
    function syncModalCheckboxes() {
        document.querySelectorAll('.column-toggle').forEach(checkbox => {
            const columnName = checkbox.dataset.column;
            const modalCheckbox = document.querySelector(`#modal-col-${columnName}`);
            if (modalCheckbox) {
                modalCheckbox.checked = checkbox.checked;
            }
        });
    }

    // Save column settings from modal
    function saveColumnSettings() {
        document.querySelectorAll('#columnSettingsModal .column-toggle').forEach(checkbox => {
            const columnName = checkbox.dataset.column;
            const mainCheckbox = document.querySelector(`#col-${columnName}`);
            if (mainCheckbox) {
                mainCheckbox.checked = checkbox.checked;
                toggleColumn(columnName, checkbox.checked);
            }
        });
        saveColumnPreferences();
        
        // Close modal
        const modal = bootstrap.Modal.getInstance(document.getElementById('columnSettingsModal'));
        if (modal) {
            modal.hide();
        }
    }

    // Initialize column reordering
    function initializeColumnOrder() {
        const table = document.querySelector('.table');
        if (!table) return;

        const thead = table.querySelector('thead tr');
        if (!thead) return;

        // Define column order
        const columns = [
            { id: 'oath-tag', name: 'OATH Tag' },
            { id: 'assigned-to', name: 'Assigned To' },
            { id: 'category', name: 'Category' },
            { id: 'unit', name: 'Unit' },
            { id: 'location', name: 'Location' },
            { id: 'floor', name: 'Floor' },
            { id: 'status', name: 'Status' },
            { id: 'net-name', name: 'Net Name' },
            { id: 'model', name: 'Model' },
            { id: 'serial-number', name: 'Serial Number' },
            { id: 'desk-number', name: 'Desk Number' },
            { id: 'manufacturer', name: 'Manufacturer' },
            { id: 'purchase-date', name: 'Purchase Date' },
            { id: 'asset-tag', name: 'Asset Tag' },
            { id: 'service-tag', name: 'Service Tag' },
            { id: 'ip-address', name: 'IP Address' },
            { id: 'os-version', name: 'OS Version' },
            { id: 'phone-number', name: 'Phone Number' },
            { id: 'purchase-price', name: 'Purchase Price' },
            { id: 'warranty-end', name: 'Warranty End' },
            { id: 'notes', name: 'Notes' },
            { id: 'created-at', name: 'Created At' },
            { id: 'updated-at', name: 'Updated At' }
        ];

        // Load saved order or use default
        const savedOrder = localStorage.getItem('equipmentColumnOrder');
        const columnOrder = savedOrder ? JSON.parse(savedOrder) : columns.map(c => c.id);

        // Apply the order to the table
        reorderTableColumns(columnOrder);

        // Make table headers draggable
        if (typeof Sortable !== 'undefined') {
            new Sortable(thead, {
                animation: 150,
                ghostClass: 'sortable-ghost',
                chosenClass: 'sortable-chosen',
                dragClass: 'sortable-drag',
                filter: '.actions-header', // Don't allow dragging the Actions column
                onEnd: function(evt) {
                    const headerCells = Array.from(thead.children);
                    const newOrder = [];
                    
                    headerCells.forEach(cell => {
                        // Find which column this header represents
                        for (const column of columns) {
                            if (cell.classList.contains(`column-${column.id}`)) {
                                newOrder.push(column.id);
                                break;
                            }
                        }
                    });
                    
                    // Add Actions column at the end
                    newOrder.push('actions');
                    
                    localStorage.setItem('equipmentColumnOrder', JSON.stringify(newOrder));
                    reorderTableColumns(newOrder);
                }
            });
        }
    }

    // Reorder table columns based on the new order
    function reorderTableColumns(columnOrder) {
        const table = document.querySelector('.table');
        if (!table) return;

        const thead = table.querySelector('thead tr');
        const tbody = table.querySelector('tbody');

        // Reorder header cells
        const headerCells = Array.from(thead.children);
        const newHeaderOrder = [];
        
        columnOrder.forEach(columnId => {
            const cell = headerCells.find(cell => cell.classList.contains(`column-${columnId}`));
            if (cell) newHeaderOrder.push(cell);
        });

        // Add Actions column at the end
        const actionsCell = headerCells.find(cell => cell.textContent.trim() === 'Actions');
        if (actionsCell) newHeaderOrder.push(actionsCell);

        // Clear and re-add header cells
        thead.innerHTML = '';
        newHeaderOrder.forEach(cell => thead.appendChild(cell));

        // Reorder data cells for each row
        const rows = tbody.querySelectorAll('tr');
        rows.forEach(row => {
            const cells = Array.from(row.children);
            const newCellOrder = [];
            
            columnOrder.forEach(columnId => {
                const cell = cells.find(cell => cell.classList.contains(`column-${columnId}`));
                if (cell) newCellOrder.push(cell);
            });

            // Add Actions cell at the end
            const actionsCell = cells.find(cell => cell.querySelector('.btn-group'));
            if (actionsCell) newCellOrder.push(actionsCell);

            // Clear and re-add cells
            row.innerHTML = '';
            newCellOrder.forEach(cell => row.appendChild(cell));
        });
    }

    // Initialize tooltips for truncated text
    function initializeTooltips() {
        // Initialize Bootstrap tooltips
        const tooltipTriggerList = [].slice.call(document.querySelectorAll('[title]'));
        tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl, {
                placement: 'top',
                trigger: 'hover'
            });
        });
    }

    // Reset column order to default
    function resetColumnOrder() {
        localStorage.removeItem('equipmentColumnOrder');
        initializeColumnOrder();
    }
    
    function toggleColumn(columnName, show) {
        const columnClass = `column-${columnName}`;
        const elements = document.querySelectorAll(`.${columnClass}`);
        
        elements.forEach(element => {
            if (show) {
                element.style.display = '';
            } else {
                element.style.display = 'none';
            }
        });
    }
    
    function showAllColumns() {
        document.querySelectorAll('.column-toggle').forEach(checkbox => {
            checkbox.checked = true;
            toggleColumn(checkbox.dataset.column, true);
        });
        saveColumnPreferences();
    }
    
    function saveColumnPreferences() {
        const preferences = {};
        document.querySelectorAll('.column-toggle').forEach(checkbox => {
            preferences[checkbox.dataset.column] = checkbox.checked;
        });
        localStorage.setItem('equipment-column-preferences', JSON.stringify(preferences));
    }
    
    function loadColumnPreferences() {
        const saved = localStorage.getItem('equipment-column-preferences');
        if (saved) {
            const preferences = JSON.parse(saved);
            document.querySelectorAll('.column-toggle').forEach(checkbox => {
                const columnName = checkbox.dataset.column;
                if (preferences.hasOwnProperty(columnName)) {
                    checkbox.checked = preferences[columnName];
                    toggleColumn(columnName, preferences[columnName]);
                }
            });
        }
    }
</script>

<!-- Column Settings Modal -->
<div class="modal fade" id="columnSettingsModal" tabindex="-1" aria-labelledby="columnSettingsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="columnSettingsModalLabel">
                    <i class="bi bi-gear"></i> Column Settings
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-8">
                        <h6>Show/Hide Columns</h6>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-oath-tag" data-column="oath-tag" checked>
                                    <label class="form-check-label" for="modal-col-oath-tag">OATH Tag</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-assigned-to" data-column="assigned-to" checked>
                                    <label class="form-check-label" for="modal-col-assigned-to">Assigned To</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-category" data-column="category" checked>
                                    <label class="form-check-label" for="modal-col-category">Category</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-unit" data-column="unit" checked>
                                    <label class="form-check-label" for="modal-col-unit">Unit</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-location" data-column="location" checked>
                                    <label class="form-check-label" for="modal-col-location">Location</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-floor" data-column="floor" checked>
                                    <label class="form-check-label" for="modal-col-floor">Floor</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-status" data-column="status" checked>
                                    <label class="form-check-label" for="modal-col-status">Status</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-net-name" data-column="net-name" checked>
                                    <label class="form-check-label" for="modal-col-net-name">Net Name</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-model" data-column="model" checked>
                                    <label class="form-check-label" for="modal-col-model">Model</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-serial-number" data-column="serial-number" checked>
                                    <label class="form-check-label" for="modal-col-serial-number">Serial Number</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-desk-number" data-column="desk-number" checked>
                                    <label class="form-check-label" for="modal-col-desk-number">Desk Number</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-manufacturer" data-column="manufacturer" checked>
                                    <label class="form-check-label" for="modal-col-manufacturer">Manufacturer</label>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-purchase-date" data-column="purchase-date" checked>
                                    <label class="form-check-label" for="modal-col-purchase-date">Purchase Date</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-asset-tag" data-column="asset-tag" checked>
                                    <label class="form-check-label" for="modal-col-asset-tag">Asset Tag</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-service-tag" data-column="service-tag" checked>
                                    <label class="form-check-label" for="modal-col-service-tag">Service Tag</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-ip-address" data-column="ip-address" checked>
                                    <label class="form-check-label" for="modal-col-ip-address">IP Address</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-os-version" data-column="os-version" checked>
                                    <label class="form-check-label" for="modal-col-os-version">OS Version</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-phone-number" data-column="phone-number" checked>
                                    <label class="form-check-label" for="modal-col-phone-number">Phone Number</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-purchase-price" data-column="purchase-price" checked>
                                    <label class="form-check-label" for="modal-col-purchase-price">Purchase Price</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-warranty-end" data-column="warranty-end" checked>
                                    <label class="form-check-label" for="modal-col-warranty-end">Warranty End</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-notes" data-column="notes" checked>
                                    <label class="form-check-label" for="modal-col-notes">Notes</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-created-at" data-column="created-at" checked>
                                    <label class="form-check-label" for="modal-col-created-at">Created At</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input column-toggle" type="checkbox" id="modal-col-updated-at" data-column="updated-at" checked>
                                    <label class="form-check-label" for="modal-col-updated-at">Updated At</label>
                                </div>
                            </div>
                        </div>
                        <div class="mt-3">
                            <button class="btn btn-sm btn-outline-primary" onclick="showAllColumns()">Show All</button>
                            <button class="btn btn-sm btn-outline-secondary ms-2" onclick="resetColumnOrder()">Reset Column Order</button>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <h6>Column Management</h6>
                        <p class="text-muted small">Drag table headers to reorder columns</p>
                        <div class="alert alert-info">
                            <i class="bi bi-info-circle"></i>
                            <strong>Tip:</strong> You can also drag column headers directly in the table to reorder them.
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="saveColumnSettings()">Save Settings</button>
            </div>
        </div>
    </div>
</div>
}

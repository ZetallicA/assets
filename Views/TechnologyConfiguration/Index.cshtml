@model IEnumerable<AssetManagement.Models.TechnologyConfiguration>

@{
    ViewData["Title"] = "Technology Configuration";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2><i class="bi bi-gear-wide-connected"></i> Technology Configuration</h2>
                <a asp-action="Create" class="btn btn-primary">
                    <i class="bi bi-plus-circle"></i> Add New Configuration
                </a>
            </div>

            <!-- Search and Filter -->
            <div class="row mb-3">
                <div class="col-md-6">
                    <form asp-action="Index" method="get" class="d-flex">
                        <input type="search" name="searchString" value="@ViewData["CurrentFilter"]" 
                               class="form-control me-2" placeholder="Search by Net Name, IP, MAC, Equipment..." 
                               id="searchInput" autocomplete="off">
                        <button type="submit" class="btn btn-outline-secondary">
                            <i class="bi bi-search"></i>
                        </button>
                        @if (!string.IsNullOrEmpty(ViewData["CurrentFilter"]?.ToString()))
                        {
                            <a asp-action="Index" class="btn btn-outline-secondary ms-2">
                                <i class="bi bi-x-circle"></i>
                            </a>
                        }
                    </form>
                    <div id="searchSuggestions" class="position-absolute bg-white border rounded shadow-sm" style="z-index: 1000; display: none; width: 300px;"></div>
                </div>
                <div class="col-md-6 text-end">
                    <div class="d-inline-flex align-items-center">
                        <label class="me-2">Records per page:</label>
                        <select id="pageSizeSelect" class="form-select" style="width: auto;">
                            <option value="10">10</option>
                            <option value="25">25</option>
                            <option value="50">50</option>
                            <option value="100">100</option>
                        </select>
                    </div>
                </div>
            </div>

            <!-- Results Table -->
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>
                                <a asp-action="Index" asp-route-sortOrder="@ViewData["EquipmentSortParm"]" 
                                   asp-route-currentFilter="@ViewData["CurrentFilter"]" 
                                   asp-route-pageSize="@ViewData["CurrentPageSize"]"
                                   class="text-white text-decoration-none">
                                    Equipment @if(ViewData["CurrentSort"]?.ToString() == "equipment") { <i class="bi bi-arrow-up"></i> } else if(ViewData["CurrentSort"]?.ToString() == "equipment_desc") { <i class="bi bi-arrow-down"></i> }
                                </a>
                            </th>
                            <th>
                                <a asp-action="Index" asp-route-sortOrder="@ViewData["NetNameSortParm"]" 
                                   asp-route-currentFilter="@ViewData["CurrentFilter"]" 
                                   asp-route-pageSize="@ViewData["CurrentPageSize"]"
                                   class="text-white text-decoration-none">
                                    Net Name @if(ViewData["CurrentSort"]?.ToString() == "netname") { <i class="bi bi-arrow-up"></i> } else if(ViewData["CurrentSort"]?.ToString() == "netname_desc") { <i class="bi bi-arrow-down"></i> }
                                </a>
                            </th>
                            <th>IPv4 Address</th>
                            <th>MAC Address</th>
                            <th>Switch/Port</th>
                            <th>Phone</th>
                            <th>Last Updated</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td>
                                    @if (item.Equipment != null)
                                    {
                                        <strong>@item.Equipment.OATH_Tag</strong><br>
                                        <small class="text-muted">@item.Equipment.Model</small>
                                    }
                                    else
                                    {
                                        <span class="text-muted">Equipment not found</span>
                                    }
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(item.NetName))
                                    {
                                        <strong>@item.NetName</strong>
                                    }
                                    else
                                    {
                                        <span class="text-muted">-</span>
                                    }
                                </td>
                                <td>@(item.IPv4Address ?? "-")</td>
                                <td>
                                    @if (!string.IsNullOrEmpty(item.MACAddress))
                                    {
                                        <code>@item.MACAddress</code>
                                    }
                                    else
                                    {
                                        <span class="text-muted">-</span>
                                    }
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(item.SwitchName) || !string.IsNullOrEmpty(item.SwitchPort))
                                    {
                                        @(item.SwitchName ?? "")@(!string.IsNullOrEmpty(item.SwitchName) && !string.IsNullOrEmpty(item.SwitchPort) ? "/" : "")@(item.SwitchPort ?? "")
                                    }
                                    else
                                    {
                                        <span class="text-muted">-</span>
                                    }
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(item.PhoneNumber))
                                    {
                                        @item.PhoneNumber@(!string.IsNullOrEmpty(item.Extension) ? $" x{item.Extension}" : "")
                                    }
                                    else
                                    {
                                        <span class="text-muted">-</span>
                                    }
                                </td>
                                <td>
                                    @if (item.LastUpdated.HasValue)
                                    {
                                        <small>@item.LastUpdated.Value.ToString("MM/dd/yyyy")<br>@(item.UpdatedBy ?? "System")</small>
                                    }
                                    else
                                    {
                                        <span class="text-muted">-</span>
                                    }
                                </td>
                                <td>
                                    <div class="btn-group" role="group">
                                        <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-sm btn-outline-info" title="View Details">
                                            <i class="bi bi-eye"></i>
                                        </a>
                                        <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-outline-warning" title="Edit">
                                            <i class="bi bi-pencil"></i>
                                        </a>
                                        <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-sm btn-outline-danger" title="Delete">
                                            <i class="bi bi-trash"></i>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            @if (!Model.Any())
            {
                <div class="text-center py-5">
                    <i class="bi bi-inbox display-1 text-muted"></i>
                    <h4 class="text-muted mt-3">No technology configurations found</h4>
                    <p class="text-muted">Start by adding a new configuration for your equipment.</p>
                    <a asp-action="Create" class="btn btn-primary">
                        <i class="bi bi-plus-circle"></i> Add First Configuration
                    </a>
                </div>
            }

            <!-- Pagination will be added later -->
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Page size selector
        document.getElementById('pageSizeSelect').addEventListener('change', function() {
            const pageSize = this.value;
            const url = new URL(window.location);
            url.searchParams.set('pageSize', pageSize);
            url.searchParams.delete('pageNumber'); // Reset to first page
            window.location.href = url.toString();
        });

        // Search autocomplete functionality
        let searchTimeout;
        const searchInput = document.getElementById('searchInput');
        const searchSuggestions = document.getElementById('searchSuggestions');
        let selectedIndex = -1;

        searchInput.addEventListener('input', function() {
            clearTimeout(searchTimeout);
            const query = this.value.trim();
            
            if (query.length < 2) {
                searchSuggestions.style.display = 'none';
                return;
            }

            searchTimeout = setTimeout(() => {
                fetchSearchSuggestions(query);
            }, 300);
        });

        searchInput.addEventListener('keydown', function(e) {
            const suggestions = searchSuggestions.querySelectorAll('.suggestion-item');
            
            if (e.key === 'ArrowDown') {
                e.preventDefault();
                selectedIndex = Math.min(selectedIndex + 1, suggestions.length - 1);
                updateSelection(suggestions);
            } else if (e.key === 'ArrowUp') {
                e.preventDefault();
                selectedIndex = Math.max(selectedIndex - 1, -1);
                updateSelection(suggestions);
            } else if (e.key === 'Enter' && selectedIndex >= 0) {
                e.preventDefault();
                suggestions[selectedIndex].click();
            } else if (e.key === 'Escape') {
                searchSuggestions.style.display = 'none';
                selectedIndex = -1;
            }
        });

        async function fetchSearchSuggestions(query) {
            try {
                const response = await fetch(`/TechnologyConfiguration/GetSearchSuggestions?query=${encodeURIComponent(query)}`);
                const suggestions = await response.json();
                displaySearchSuggestions(suggestions);
            } catch (error) {
                console.error('Error fetching suggestions:', error);
            }
        }

        function displaySearchSuggestions(suggestions) {
            if (suggestions.length === 0) {
                searchSuggestions.style.display = 'none';
                return;
            }

            const html = suggestions.map(suggestion => 
                `<div class="suggestion-item p-2 cursor-pointer hover:bg-gray-100" onclick="selectSuggestion('${suggestion}')">${suggestion}</div>`
            ).join('');

            searchSuggestions.innerHTML = html;
            searchSuggestions.style.display = 'block';
            selectedIndex = -1;
        }

        function updateSelection(suggestions) {
            suggestions.forEach((item, index) => {
                if (index === selectedIndex) {
                    item.classList.add('bg-light');
                } else {
                    item.classList.remove('bg-light');
                }
            });
        }

        function selectSuggestion(value) {
            searchInput.value = value;
            searchSuggestions.style.display = 'none';
            searchInput.form.submit();
        }

        // Hide suggestions when clicking outside
        document.addEventListener('click', function(e) {
            if (!searchInput.contains(e.target) && !searchSuggestions.contains(e.target)) {
                searchSuggestions.style.display = 'none';
            }
        });
    </script>
}
